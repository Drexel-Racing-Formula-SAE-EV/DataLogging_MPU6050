
accelerometer_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f6c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08005144  08005144  00015144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800539c  0800539c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800539c  0800539c  0001539c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053a4  080053a4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053a4  080053a4  000153a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053a8  080053a8  000153a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080053ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000070  0800541c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  0800541c  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a15  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022b0  00000000  00000000  00030ab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  00032d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c38  00000000  00000000  00033a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e683  00000000  00000000  000346c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010bb8  00000000  00000000  00052d43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bafde  00000000  00000000  000638fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011e8d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d54  00000000  00000000  0011e92c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800512c 	.word	0x0800512c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	0800512c 	.word	0x0800512c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b974 	b.w	8000d54 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	468e      	mov	lr, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14d      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4694      	mov	ip, r2
 8000a96:	d969      	bls.n	8000b6c <__udivmoddi4+0xe8>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b152      	cbz	r2, 8000ab4 <__udivmoddi4+0x30>
 8000a9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa2:	f1c2 0120 	rsb	r1, r2, #32
 8000aa6:	fa20 f101 	lsr.w	r1, r0, r1
 8000aaa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aae:	ea41 0e03 	orr.w	lr, r1, r3
 8000ab2:	4094      	lsls	r4, r2
 8000ab4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab8:	0c21      	lsrs	r1, r4, #16
 8000aba:	fbbe f6f8 	udiv	r6, lr, r8
 8000abe:	fa1f f78c 	uxth.w	r7, ip
 8000ac2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ac6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aca:	fb06 f107 	mul.w	r1, r6, r7
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ada:	f080 811f 	bcs.w	8000d1c <__udivmoddi4+0x298>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 811c 	bls.w	8000d1c <__udivmoddi4+0x298>
 8000ae4:	3e02      	subs	r6, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a5b      	subs	r3, r3, r1
 8000aea:	b2a4      	uxth	r4, r4
 8000aec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af0:	fb08 3310 	mls	r3, r8, r0, r3
 8000af4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af8:	fb00 f707 	mul.w	r7, r0, r7
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	d90a      	bls.n	8000b16 <__udivmoddi4+0x92>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b08:	f080 810a 	bcs.w	8000d20 <__udivmoddi4+0x29c>
 8000b0c:	42a7      	cmp	r7, r4
 8000b0e:	f240 8107 	bls.w	8000d20 <__udivmoddi4+0x29c>
 8000b12:	4464      	add	r4, ip
 8000b14:	3802      	subs	r0, #2
 8000b16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1a:	1be4      	subs	r4, r4, r7
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	b11d      	cbz	r5, 8000b28 <__udivmoddi4+0xa4>
 8000b20:	40d4      	lsrs	r4, r2
 8000b22:	2300      	movs	r3, #0
 8000b24:	e9c5 4300 	strd	r4, r3, [r5]
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0xc2>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	f000 80ef 	beq.w	8000d16 <__udivmoddi4+0x292>
 8000b38:	2600      	movs	r6, #0
 8000b3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3e:	4630      	mov	r0, r6
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	fab3 f683 	clz	r6, r3
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d14a      	bne.n	8000be4 <__udivmoddi4+0x160>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xd4>
 8000b52:	4282      	cmp	r2, r0
 8000b54:	f200 80f9 	bhi.w	8000d4a <__udivmoddi4+0x2c6>
 8000b58:	1a84      	subs	r4, r0, r2
 8000b5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	469e      	mov	lr, r3
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d0e0      	beq.n	8000b28 <__udivmoddi4+0xa4>
 8000b66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b6a:	e7dd      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000b6c:	b902      	cbnz	r2, 8000b70 <__udivmoddi4+0xec>
 8000b6e:	deff      	udf	#255	; 0xff
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	f040 8092 	bne.w	8000c9e <__udivmoddi4+0x21a>
 8000b7a:	eba1 010c 	sub.w	r1, r1, ip
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2601      	movs	r6, #1
 8000b88:	0c20      	lsrs	r0, r4, #16
 8000b8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b96:	fb0e f003 	mul.w	r0, lr, r3
 8000b9a:	4288      	cmp	r0, r1
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x12c>
 8000b9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x12a>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2c0>
 8000bae:	4643      	mov	r3, r8
 8000bb0:	1a09      	subs	r1, r1, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bbc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x156>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x154>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2ca>
 8000bd8:	4608      	mov	r0, r1
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000be2:	e79c      	b.n	8000b1e <__udivmoddi4+0x9a>
 8000be4:	f1c6 0720 	rsb	r7, r6, #32
 8000be8:	40b3      	lsls	r3, r6
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bf6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	40f9      	lsrs	r1, r7
 8000bfe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c02:	fa00 f306 	lsl.w	r3, r0, r6
 8000c06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c0a:	0c20      	lsrs	r0, r4, #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fb09 1118 	mls	r1, r9, r8, r1
 8000c14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c18:	fb08 f00e 	mul.w	r0, r8, lr
 8000c1c:	4288      	cmp	r0, r1
 8000c1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b8>
 8000c24:	eb1c 0101 	adds.w	r1, ip, r1
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2bc>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2bc>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1a09      	subs	r1, r1, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c44:	fb09 1110 	mls	r1, r9, r0, r1
 8000c48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	458e      	cmp	lr, r1
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1e2>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2b4>
 8000c5e:	458e      	cmp	lr, r1
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2b4>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4461      	add	r1, ip
 8000c66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c6e:	eba1 010e 	sub.w	r1, r1, lr
 8000c72:	42a1      	cmp	r1, r4
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46a6      	mov	lr, r4
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x2a4>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x2a0>
 8000c7c:	b15d      	cbz	r5, 8000c96 <__udivmoddi4+0x212>
 8000c7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c82:	eb61 010e 	sbc.w	r1, r1, lr
 8000c86:	fa01 f707 	lsl.w	r7, r1, r7
 8000c8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c8e:	40f1      	lsrs	r1, r6
 8000c90:	431f      	orrs	r7, r3
 8000c92:	e9c5 7100 	strd	r7, r1, [r5]
 8000c96:	2600      	movs	r6, #0
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	40d8      	lsrs	r0, r3
 8000ca4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4301      	orrs	r1, r0
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc0:	0c0b      	lsrs	r3, r1, #16
 8000cc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x260>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b8>
 8000cdc:	429e      	cmp	r6, r3
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b8>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	b289      	uxth	r1, r1
 8000ce8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cec:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x28a>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000d0a:	3e02      	subs	r6, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	1ac9      	subs	r1, r1, r3
 8000d10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0x104>
 8000d16:	462e      	mov	r6, r5
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e705      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	e6e3      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d20:	4618      	mov	r0, r3
 8000d22:	e6f8      	b.n	8000b16 <__udivmoddi4+0x92>
 8000d24:	454b      	cmp	r3, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f8>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d30:	3801      	subs	r0, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f8>
 8000d34:	4646      	mov	r6, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x28a>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1e2>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x260>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b8>
 8000d44:	3b02      	subs	r3, #2
 8000d46:	4461      	add	r1, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x12c>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e709      	b.n	8000b62 <__udivmoddi4+0xde>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x156>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d60:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d64:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d013      	beq.n	8000d98 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d70:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d74:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d78:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d00b      	beq.n	8000d98 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d80:	e000      	b.n	8000d84 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d82:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d84:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d0f9      	beq.n	8000d82 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d8e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d98:	687b      	ldr	r3, [r7, #4]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000daa:	f000 fcce 	bl	800174a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dae:	f000 f80e 	bl	8000dce <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db2:	f000 f8e3 	bl	8000f7c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000db6:	f000 f855 	bl	8000e64 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000dba:	f000 f893 	bl	8000ee4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  mpu6050_init();
 8000dbe:	f000 f965 	bl	800108c <mpu6050_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  mpu6050_read();
 8000dc2:	f000 fa19 	bl	80011f8 <mpu6050_read>
	  HAL_Delay(10);
 8000dc6:	200a      	movs	r0, #10
 8000dc8:	f000 fd30 	bl	800182c <HAL_Delay>
	  mpu6050_read();
 8000dcc:	e7f9      	b.n	8000dc2 <main+0x1c>

08000dce <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b094      	sub	sp, #80	; 0x50
 8000dd2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd4:	f107 0318 	add.w	r3, r7, #24
 8000dd8:	2238      	movs	r2, #56	; 0x38
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f003 fc9f 	bl	8004720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000df0:	2000      	movs	r0, #0
 8000df2:	f001 febf 	bl	8002b74 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000df6:	2302      	movs	r3, #2
 8000df8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e00:	2340      	movs	r3, #64	; 0x40
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e04:	2302      	movs	r3, #2
 8000e06:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000e0c:	2304      	movs	r3, #4
 8000e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000e10:	2355      	movs	r3, #85	; 0x55
 8000e12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e14:	2302      	movs	r3, #2
 8000e16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e20:	f107 0318 	add.w	r3, r7, #24
 8000e24:	4618      	mov	r0, r3
 8000e26:	f001 ff59 	bl	8002cdc <HAL_RCC_OscConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e30:	f000 f926 	bl	8001080 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e34:	230f      	movs	r3, #15
 8000e36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2104      	movs	r1, #4
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f002 fa5d 	bl	800330c <HAL_RCC_ClockConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000e58:	f000 f912 	bl	8001080 <Error_Handler>
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	3750      	adds	r7, #80	; 0x50
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e6a:	4a1c      	ldr	r2, [pc, #112]	; (8000edc <MX_I2C1_Init+0x78>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e70:	4a1b      	ldr	r2, [pc, #108]	; (8000ee0 <MX_I2C1_Init+0x7c>)
 8000e72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e74:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e7a:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e9e:	480e      	ldr	r0, [pc, #56]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000ea0:	f000 ff64 	bl	8001d6c <HAL_I2C_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000eaa:	f000 f8e9 	bl	8001080 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4809      	ldr	r0, [pc, #36]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000eb2:	f001 fdc7 	bl	8002a44 <HAL_I2CEx_ConfigAnalogFilter>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ebc:	f000 f8e0 	bl	8001080 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000ec4:	f001 fe09 	bl	8002ada <HAL_I2CEx_ConfigDigitalFilter>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ece:	f000 f8d7 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	2000008c 	.word	0x2000008c
 8000edc:	40005400 	.word	0x40005400
 8000ee0:	30a0a7fb 	.word	0x30a0a7fb

08000ee4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ee8:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <MX_USART2_UART_Init+0x90>)
 8000eea:	4a23      	ldr	r2, [pc, #140]	; (8000f78 <MX_USART2_UART_Init+0x94>)
 8000eec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eee:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <MX_USART2_UART_Init+0x90>)
 8000ef0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ef4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ef6:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <MX_USART2_UART_Init+0x90>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000efc:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <MX_USART2_UART_Init+0x90>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f02:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <MX_USART2_UART_Init+0x90>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f08:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <MX_USART2_UART_Init+0x90>)
 8000f0a:	220c      	movs	r2, #12
 8000f0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f0e:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <MX_USART2_UART_Init+0x90>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f14:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <MX_USART2_UART_Init+0x90>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f1a:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <MX_USART2_UART_Init+0x90>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f20:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <MX_USART2_UART_Init+0x90>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f26:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <MX_USART2_UART_Init+0x90>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f2c:	4811      	ldr	r0, [pc, #68]	; (8000f74 <MX_USART2_UART_Init+0x90>)
 8000f2e:	f002 fdf9 	bl	8003b24 <HAL_UART_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000f38:	f000 f8a2 	bl	8001080 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	480d      	ldr	r0, [pc, #52]	; (8000f74 <MX_USART2_UART_Init+0x90>)
 8000f40:	f003 fafa 	bl	8004538 <HAL_UARTEx_SetTxFifoThreshold>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000f4a:	f000 f899 	bl	8001080 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4808      	ldr	r0, [pc, #32]	; (8000f74 <MX_USART2_UART_Init+0x90>)
 8000f52:	f003 fb2f 	bl	80045b4 <HAL_UARTEx_SetRxFifoThreshold>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000f5c:	f000 f890 	bl	8001080 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f60:	4804      	ldr	r0, [pc, #16]	; (8000f74 <MX_USART2_UART_Init+0x90>)
 8000f62:	f003 fab0 	bl	80044c6 <HAL_UARTEx_DisableFifoMode>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000f6c:	f000 f888 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	200000d8 	.word	0x200000d8
 8000f78:	40004400 	.word	0x40004400

08000f7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
 8000f90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f92:	4b2b      	ldr	r3, [pc, #172]	; (8001040 <MX_GPIO_Init+0xc4>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	4a2a      	ldr	r2, [pc, #168]	; (8001040 <MX_GPIO_Init+0xc4>)
 8000f98:	f043 0304 	orr.w	r3, r3, #4
 8000f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9e:	4b28      	ldr	r3, [pc, #160]	; (8001040 <MX_GPIO_Init+0xc4>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	f003 0304 	and.w	r3, r3, #4
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000faa:	4b25      	ldr	r3, [pc, #148]	; (8001040 <MX_GPIO_Init+0xc4>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	4a24      	ldr	r2, [pc, #144]	; (8001040 <MX_GPIO_Init+0xc4>)
 8000fb0:	f043 0320 	orr.w	r3, r3, #32
 8000fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb6:	4b22      	ldr	r3, [pc, #136]	; (8001040 <MX_GPIO_Init+0xc4>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	f003 0320 	and.w	r3, r3, #32
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <MX_GPIO_Init+0xc4>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	4a1e      	ldr	r2, [pc, #120]	; (8001040 <MX_GPIO_Init+0xc4>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <MX_GPIO_Init+0xc4>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	4b19      	ldr	r3, [pc, #100]	; (8001040 <MX_GPIO_Init+0xc4>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	4a18      	ldr	r2, [pc, #96]	; (8001040 <MX_GPIO_Init+0xc4>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe6:	4b16      	ldr	r3, [pc, #88]	; (8001040 <MX_GPIO_Init+0xc4>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2120      	movs	r1, #32
 8000ff6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ffa:	f000 fe9f 	bl	8001d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ffe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001002:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001004:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001008:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	480b      	ldr	r0, [pc, #44]	; (8001044 <MX_GPIO_Init+0xc8>)
 8001016:	f000 fd0f 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800101a:	2320      	movs	r3, #32
 800101c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101e:	2301      	movs	r3, #1
 8001020:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001034:	f000 fd00 	bl	8001a38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001038:	bf00      	nop
 800103a:	3728      	adds	r7, #40	; 0x28
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40021000 	.word	0x40021000
 8001044:	48000800 	.word	0x48000800

08001048 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	e009      	b.n	800106e <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	1c5a      	adds	r2, r3, #1
 800105e:	60ba      	str	r2, [r7, #8]
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fe78 	bl	8000d58 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	3301      	adds	r3, #1
 800106c:	617b      	str	r3, [r7, #20]
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	429a      	cmp	r2, r3
 8001074:	dbf1      	blt.n	800105a <_write+0x12>
  }
  return len;
 8001076:	687b      	ldr	r3, [r7, #4]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001084:	b672      	cpsid	i
}
 8001086:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001088:	e7fe      	b.n	8001088 <Error_Handler+0x8>
	...

0800108c <mpu6050_init>:
extern float x_gyro;
extern float y_gyro;
extern float z_gyro;
extern float temp;

void mpu6050_init(){
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af04      	add	r7, sp, #16
	uint8_t temp_data;
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, (MPU6050_ADDR<<1), 1,100);
 8001092:	2364      	movs	r3, #100	; 0x64
 8001094:	2201      	movs	r2, #1
 8001096:	21d2      	movs	r1, #210	; 0xd2
 8001098:	484a      	ldr	r0, [pc, #296]	; (80011c4 <mpu6050_init+0x138>)
 800109a:	f001 f925 	bl	80022e8 <HAL_I2C_IsDeviceReady>
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
	  if (ret==HAL_OK){
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d103      	bne.n	80010b0 <mpu6050_init+0x24>
		  printf("The device is ready\n");
 80010a8:	4847      	ldr	r0, [pc, #284]	; (80011c8 <mpu6050_init+0x13c>)
 80010aa:	f003 fbaf 	bl	800480c <puts>
 80010ae:	e002      	b.n	80010b6 <mpu6050_init+0x2a>
	  }
	  else{
		  printf("The device is not ready. Check configurations\n");
 80010b0:	4846      	ldr	r0, [pc, #280]	; (80011cc <mpu6050_init+0x140>)
 80010b2:	f003 fbab 	bl	800480c <puts>
	  }

	  temp_data = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	71bb      	strb	r3, [r7, #6]
	  ret = HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR<<1), REG_SMPLRT_DIV,1, &temp_data, 1, 200);
 80010ba:	23c8      	movs	r3, #200	; 0xc8
 80010bc:	9302      	str	r3, [sp, #8]
 80010be:	2301      	movs	r3, #1
 80010c0:	9301      	str	r3, [sp, #4]
 80010c2:	1dbb      	adds	r3, r7, #6
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2301      	movs	r3, #1
 80010c8:	2219      	movs	r2, #25
 80010ca:	21d2      	movs	r1, #210	; 0xd2
 80010cc:	483d      	ldr	r0, [pc, #244]	; (80011c4 <mpu6050_init+0x138>)
 80010ce:	f000 fedd 	bl	8001e8c <HAL_I2C_Mem_Write>
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
	  if (ret==HAL_OK){
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d103      	bne.n	80010e4 <mpu6050_init+0x58>
		  printf("Configuring Sample Rate Divider\n");
 80010dc:	483c      	ldr	r0, [pc, #240]	; (80011d0 <mpu6050_init+0x144>)
 80010de:	f003 fb95 	bl	800480c <puts>
 80010e2:	e002      	b.n	80010ea <mpu6050_init+0x5e>
	  }
	  else{
		  printf("Failed to configure Sample Rate Divider\n");
 80010e4:	483b      	ldr	r0, [pc, #236]	; (80011d4 <mpu6050_init+0x148>)
 80010e6:	f003 fb91 	bl	800480c <puts>
	  }

	  temp_data = 2;
 80010ea:	2302      	movs	r3, #2
 80010ec:	71bb      	strb	r3, [r7, #6]
	  ret = HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR<<1), REG_CONFIG,1, &temp_data, 1, 200);
 80010ee:	23c8      	movs	r3, #200	; 0xc8
 80010f0:	9302      	str	r3, [sp, #8]
 80010f2:	2301      	movs	r3, #1
 80010f4:	9301      	str	r3, [sp, #4]
 80010f6:	1dbb      	adds	r3, r7, #6
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	2301      	movs	r3, #1
 80010fc:	221a      	movs	r2, #26
 80010fe:	21d2      	movs	r1, #210	; 0xd2
 8001100:	4830      	ldr	r0, [pc, #192]	; (80011c4 <mpu6050_init+0x138>)
 8001102:	f000 fec3 	bl	8001e8c <HAL_I2C_Mem_Write>
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
	  if (ret==HAL_OK){
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d103      	bne.n	8001118 <mpu6050_init+0x8c>
		  printf("Configuring Configuration Register\n");
 8001110:	4831      	ldr	r0, [pc, #196]	; (80011d8 <mpu6050_init+0x14c>)
 8001112:	f003 fb7b 	bl	800480c <puts>
 8001116:	e002      	b.n	800111e <mpu6050_init+0x92>
	  }
	  else{
		  printf("Failed to configure Configuration Register\n");
 8001118:	4830      	ldr	r0, [pc, #192]	; (80011dc <mpu6050_init+0x150>)
 800111a:	f003 fb77 	bl	800480c <puts>
	  }

	  temp_data = FS_GYRO_500;
 800111e:	2308      	movs	r3, #8
 8001120:	71bb      	strb	r3, [r7, #6]
	  ret = HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR<<1), REG_CONFIG_GYRO,1, &temp_data, 1, 200);
 8001122:	23c8      	movs	r3, #200	; 0xc8
 8001124:	9302      	str	r3, [sp, #8]
 8001126:	2301      	movs	r3, #1
 8001128:	9301      	str	r3, [sp, #4]
 800112a:	1dbb      	adds	r3, r7, #6
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	2301      	movs	r3, #1
 8001130:	221b      	movs	r2, #27
 8001132:	21d2      	movs	r1, #210	; 0xd2
 8001134:	4823      	ldr	r0, [pc, #140]	; (80011c4 <mpu6050_init+0x138>)
 8001136:	f000 fea9 	bl	8001e8c <HAL_I2C_Mem_Write>
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
	  if (ret==HAL_OK){
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d103      	bne.n	800114c <mpu6050_init+0xc0>
		  printf("Configuring Gyroscope\n");
 8001144:	4826      	ldr	r0, [pc, #152]	; (80011e0 <mpu6050_init+0x154>)
 8001146:	f003 fb61 	bl	800480c <puts>
 800114a:	e002      	b.n	8001152 <mpu6050_init+0xc6>
	  }
	  else{
		  printf("Failed to configure Gyroscope\n");
 800114c:	4825      	ldr	r0, [pc, #148]	; (80011e4 <mpu6050_init+0x158>)
 800114e:	f003 fb5d 	bl	800480c <puts>
	  }

	  temp_data = FS_ACC_4G;
 8001152:	2308      	movs	r3, #8
 8001154:	71bb      	strb	r3, [r7, #6]
	  ret = HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR<<1), REG_CONFIG_ACC,1, &temp_data, 1, 200);
 8001156:	23c8      	movs	r3, #200	; 0xc8
 8001158:	9302      	str	r3, [sp, #8]
 800115a:	2301      	movs	r3, #1
 800115c:	9301      	str	r3, [sp, #4]
 800115e:	1dbb      	adds	r3, r7, #6
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	2301      	movs	r3, #1
 8001164:	221c      	movs	r2, #28
 8001166:	21d2      	movs	r1, #210	; 0xd2
 8001168:	4816      	ldr	r0, [pc, #88]	; (80011c4 <mpu6050_init+0x138>)
 800116a:	f000 fe8f 	bl	8001e8c <HAL_I2C_Mem_Write>
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
	  if (ret==HAL_OK){
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d103      	bne.n	8001180 <mpu6050_init+0xf4>
	  	  printf("Configuring Accelerometer \n");
 8001178:	481b      	ldr	r0, [pc, #108]	; (80011e8 <mpu6050_init+0x15c>)
 800117a:	f003 fb47 	bl	800480c <puts>
 800117e:	e002      	b.n	8001186 <mpu6050_init+0xfa>
	  }
	  else{
	  	  printf("Failed to Configure Accelerometer \n");
 8001180:	481a      	ldr	r0, [pc, #104]	; (80011ec <mpu6050_init+0x160>)
 8001182:	f003 fb43 	bl	800480c <puts>
	  }

	  temp_data = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	71bb      	strb	r3, [r7, #6]
	  ret = HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR<<1), REG_USR_CTRL,1, &temp_data, 1, 200);
 800118a:	23c8      	movs	r3, #200	; 0xc8
 800118c:	9302      	str	r3, [sp, #8]
 800118e:	2301      	movs	r3, #1
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	1dbb      	adds	r3, r7, #6
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2301      	movs	r3, #1
 8001198:	226b      	movs	r2, #107	; 0x6b
 800119a:	21d2      	movs	r1, #210	; 0xd2
 800119c:	4809      	ldr	r0, [pc, #36]	; (80011c4 <mpu6050_init+0x138>)
 800119e:	f000 fe75 	bl	8001e8c <HAL_I2C_Mem_Write>
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
	  if (ret==HAL_OK){
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d103      	bne.n	80011b4 <mpu6050_init+0x128>
	  	  printf("Exiting from Sleep Mode\n");
 80011ac:	4810      	ldr	r0, [pc, #64]	; (80011f0 <mpu6050_init+0x164>)
 80011ae:	f003 fb2d 	bl	800480c <puts>
	  }
	  else{
	      printf("Failed to Exit from Sleep Mode \n");
	  }
}
 80011b2:	e002      	b.n	80011ba <mpu6050_init+0x12e>
	      printf("Failed to Exit from Sleep Mode \n");
 80011b4:	480f      	ldr	r0, [pc, #60]	; (80011f4 <mpu6050_init+0x168>)
 80011b6:	f003 fb29 	bl	800480c <puts>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2000008c 	.word	0x2000008c
 80011c8:	08005144 	.word	0x08005144
 80011cc:	08005158 	.word	0x08005158
 80011d0:	08005188 	.word	0x08005188
 80011d4:	080051a8 	.word	0x080051a8
 80011d8:	080051d0 	.word	0x080051d0
 80011dc:	080051f4 	.word	0x080051f4
 80011e0:	08005220 	.word	0x08005220
 80011e4:	08005238 	.word	0x08005238
 80011e8:	08005258 	.word	0x08005258
 80011ec:	08005274 	.word	0x08005274
 80011f0:	08005298 	.word	0x08005298
 80011f4:	080052b0 	.word	0x080052b0

080011f8 <mpu6050_read>:

void mpu6050_read(){
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b091      	sub	sp, #68	; 0x44
 80011fc:	af04      	add	r7, sp, #16
	uint16_t x_accR, y_accR, z_accR, x_gyroR, y_gyroR, z_gyroR;
	HAL_StatusTypeDef ret;
	uint8_t data[14];
	uint8_t read_reg[14] = {ACCEL_XOUT_H,
 80011fe:	4b64      	ldr	r3, [pc, #400]	; (8001390 <mpu6050_read+0x198>)
 8001200:	1d3c      	adds	r4, r7, #4
 8001202:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001204:	c407      	stmia	r4!, {r0, r1, r2}
 8001206:	8023      	strh	r3, [r4, #0]
							ACCEL_XOUT_H + 10,
							ACCEL_XOUT_H + 11,
							ACCEL_XOUT_H + 12,
							ACCEL_XOUT_H + 13};

	ret = HAL_I2C_Mem_Read(&hi2c1, (MPU6050_ADDR<<1), ACCEL_XOUT_H, 1, data, 14, 200);
 8001208:	23c8      	movs	r3, #200	; 0xc8
 800120a:	9302      	str	r3, [sp, #8]
 800120c:	230e      	movs	r3, #14
 800120e:	9301      	str	r3, [sp, #4]
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2301      	movs	r3, #1
 8001218:	223b      	movs	r2, #59	; 0x3b
 800121a:	21d2      	movs	r1, #210	; 0xd2
 800121c:	485d      	ldr	r0, [pc, #372]	; (8001394 <mpu6050_read+0x19c>)
 800121e:	f000 ff49 	bl	80020b4 <HAL_I2C_Mem_Read>
 8001222:	4603      	mov	r3, r0
 8001224:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(ret != HAL_OK){
 8001228:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <mpu6050_read+0x40>
		printf("Error reading MPU6050\n");
 8001230:	4859      	ldr	r0, [pc, #356]	; (8001398 <mpu6050_read+0x1a0>)
 8001232:	f003 faeb 	bl	800480c <puts>
		while(1);
 8001236:	e7fe      	b.n	8001236 <mpu6050_read+0x3e>

	//HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1, (MPU6050_ADDR<<1), read_reg, 14, 1000);
    //ret = HAL_I2C_Master_Receive(&hi2c1, (MPU6050_ADDR<<1), data, 14, 1000);


    temp = ((float)(((uint16_t)data[6] << 8) | data[7]) / 340.0) + 36.53;
 8001238:	7ebb      	ldrb	r3, [r7, #26]
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	7efa      	ldrb	r2, [r7, #27]
 800123e:	4313      	orrs	r3, r2
 8001240:	ee07 3a90 	vmov	s15, r3
 8001244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001248:	ee17 0a90 	vmov	r0, s15
 800124c:	f7ff f948 	bl	80004e0 <__aeabi_f2d>
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	4b51      	ldr	r3, [pc, #324]	; (800139c <mpu6050_read+0x1a4>)
 8001256:	f7ff fac5 	bl	80007e4 <__aeabi_ddiv>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4610      	mov	r0, r2
 8001260:	4619      	mov	r1, r3
 8001262:	a349      	add	r3, pc, #292	; (adr r3, 8001388 <mpu6050_read+0x190>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	f7fe ffdc 	bl	8000224 <__adddf3>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4610      	mov	r0, r2
 8001272:	4619      	mov	r1, r3
 8001274:	f7ff fb9e 	bl	80009b4 <__aeabi_d2f>
 8001278:	4603      	mov	r3, r0
 800127a:	4a49      	ldr	r2, [pc, #292]	; (80013a0 <mpu6050_read+0x1a8>)
 800127c:	6013      	str	r3, [r2, #0]

    x_gyroR = ((uint16_t)data[0] << 8) | data[1];
 800127e:	7d3b      	ldrb	r3, [r7, #20]
 8001280:	021b      	lsls	r3, r3, #8
 8001282:	b21a      	sxth	r2, r3
 8001284:	7d7b      	ldrb	r3, [r7, #21]
 8001286:	b21b      	sxth	r3, r3
 8001288:	4313      	orrs	r3, r2
 800128a:	b21b      	sxth	r3, r3
 800128c:	85bb      	strh	r3, [r7, #44]	; 0x2c
    y_gyroR = ((uint16_t)data[2] << 8) | data[3];
 800128e:	7dbb      	ldrb	r3, [r7, #22]
 8001290:	021b      	lsls	r3, r3, #8
 8001292:	b21a      	sxth	r2, r3
 8001294:	7dfb      	ldrb	r3, [r7, #23]
 8001296:	b21b      	sxth	r3, r3
 8001298:	4313      	orrs	r3, r2
 800129a:	b21b      	sxth	r3, r3
 800129c:	857b      	strh	r3, [r7, #42]	; 0x2a
    z_gyroR = ((uint16_t)data[4] << 8) | data[5];
 800129e:	7e3b      	ldrb	r3, [r7, #24]
 80012a0:	021b      	lsls	r3, r3, #8
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	7e7b      	ldrb	r3, [r7, #25]
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	4313      	orrs	r3, r2
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	853b      	strh	r3, [r7, #40]	; 0x28

    x_accR = (uint16_t)data[8];
 80012ae:	7f3b      	ldrb	r3, [r7, #28]
 80012b0:	84fb      	strh	r3, [r7, #38]	; 0x26
    x_accR = (x_accR << 8) | data[9];
 80012b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012b4:	021b      	lsls	r3, r3, #8
 80012b6:	b21a      	sxth	r2, r3
 80012b8:	7f7b      	ldrb	r3, [r7, #29]
 80012ba:	b21b      	sxth	r3, r3
 80012bc:	4313      	orrs	r3, r2
 80012be:	b21b      	sxth	r3, r3
 80012c0:	84fb      	strh	r3, [r7, #38]	; 0x26
    y_accR = (uint16_t)data[10];
 80012c2:	7fbb      	ldrb	r3, [r7, #30]
 80012c4:	84bb      	strh	r3, [r7, #36]	; 0x24
    y_accR = (y_accR << 8) | data[11];
 80012c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	b21a      	sxth	r2, r3
 80012cc:	7ffb      	ldrb	r3, [r7, #31]
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b21b      	sxth	r3, r3
 80012d4:	84bb      	strh	r3, [r7, #36]	; 0x24
    z_accR = (uint16_t)data[12];
 80012d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012da:	847b      	strh	r3, [r7, #34]	; 0x22
    z_accR = (z_accR << 8) | data[13];
 80012dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	b21a      	sxth	r2, r3
 80012e2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	4313      	orrs	r3, r2
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	847b      	strh	r3, [r7, #34]	; 0x22

    x_gyro = (float)x_gyroR / 2048;
 80012ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80012f0:	ee07 3a90 	vmov	s15, r3
 80012f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012f8:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80013a4 <mpu6050_read+0x1ac>
 80012fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001300:	4b29      	ldr	r3, [pc, #164]	; (80013a8 <mpu6050_read+0x1b0>)
 8001302:	edc3 7a00 	vstr	s15, [r3]
    y_gyro = (float)y_gyroR / 2048;
 8001306:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001308:	ee07 3a90 	vmov	s15, r3
 800130c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001310:	eddf 6a24 	vldr	s13, [pc, #144]	; 80013a4 <mpu6050_read+0x1ac>
 8001314:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001318:	4b24      	ldr	r3, [pc, #144]	; (80013ac <mpu6050_read+0x1b4>)
 800131a:	edc3 7a00 	vstr	s15, [r3]
    z_gyro = (float)z_gyroR / 2048;
 800131e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001320:	ee07 3a90 	vmov	s15, r3
 8001324:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001328:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80013a4 <mpu6050_read+0x1ac>
 800132c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001330:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <mpu6050_read+0x1b8>)
 8001332:	edc3 7a00 	vstr	s15, [r3]

    x_acc = (float)x_accR / 65.5f;
 8001336:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001338:	ee07 3a90 	vmov	s15, r3
 800133c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001340:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80013b4 <mpu6050_read+0x1bc>
 8001344:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <mpu6050_read+0x1c0>)
 800134a:	edc3 7a00 	vstr	s15, [r3]
    y_acc = (float)y_accR / 65.5f;
 800134e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001350:	ee07 3a90 	vmov	s15, r3
 8001354:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001358:	eddf 6a16 	vldr	s13, [pc, #88]	; 80013b4 <mpu6050_read+0x1bc>
 800135c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001360:	4b16      	ldr	r3, [pc, #88]	; (80013bc <mpu6050_read+0x1c4>)
 8001362:	edc3 7a00 	vstr	s15, [r3]
    z_acc = (float)z_accR / 65.5f;
 8001366:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001368:	ee07 3a90 	vmov	s15, r3
 800136c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001370:	eddf 6a10 	vldr	s13, [pc, #64]	; 80013b4 <mpu6050_read+0x1bc>
 8001374:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <mpu6050_read+0x1c8>)
 800137a:	edc3 7a00 	vstr	s15, [r3]

    //(void)ret;
}
 800137e:	bf00      	nop
 8001380:	3734      	adds	r7, #52	; 0x34
 8001382:	46bd      	mov	sp, r7
 8001384:	bd90      	pop	{r4, r7, pc}
 8001386:	bf00      	nop
 8001388:	0a3d70a4 	.word	0x0a3d70a4
 800138c:	404243d7 	.word	0x404243d7
 8001390:	080052e8 	.word	0x080052e8
 8001394:	2000008c 	.word	0x2000008c
 8001398:	080052d0 	.word	0x080052d0
 800139c:	40754000 	.word	0x40754000
 80013a0:	20000180 	.word	0x20000180
 80013a4:	45000000 	.word	0x45000000
 80013a8:	2000016c 	.word	0x2000016c
 80013ac:	20000174 	.word	0x20000174
 80013b0:	2000017c 	.word	0x2000017c
 80013b4:	42830000 	.word	0x42830000
 80013b8:	20000168 	.word	0x20000168
 80013bc:	20000170 	.word	0x20000170
 80013c0:	20000178 	.word	0x20000178

080013c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ca:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <HAL_MspInit+0x44>)
 80013cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ce:	4a0e      	ldr	r2, [pc, #56]	; (8001408 <HAL_MspInit+0x44>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6613      	str	r3, [r2, #96]	; 0x60
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <HAL_MspInit+0x44>)
 80013d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <HAL_MspInit+0x44>)
 80013e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e6:	4a08      	ldr	r2, [pc, #32]	; (8001408 <HAL_MspInit+0x44>)
 80013e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ec:	6593      	str	r3, [r2, #88]	; 0x58
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_MspInit+0x44>)
 80013f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80013fa:	f001 fc5f 	bl	8002cbc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000

0800140c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b09a      	sub	sp, #104	; 0x68
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001424:	f107 0310 	add.w	r3, r7, #16
 8001428:	2244      	movs	r2, #68	; 0x44
 800142a:	2100      	movs	r1, #0
 800142c:	4618      	mov	r0, r3
 800142e:	f003 f977 	bl	8004720 <memset>
  if(hi2c->Instance==I2C1)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a1f      	ldr	r2, [pc, #124]	; (80014b4 <HAL_I2C_MspInit+0xa8>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d136      	bne.n	80014aa <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800143c:	2340      	movs	r3, #64	; 0x40
 800143e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001440:	2300      	movs	r3, #0
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001444:	f107 0310 	add.w	r3, r7, #16
 8001448:	4618      	mov	r0, r3
 800144a:	f002 f97b 	bl	8003744 <HAL_RCCEx_PeriphCLKConfig>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001454:	f7ff fe14 	bl	8001080 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001458:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <HAL_I2C_MspInit+0xac>)
 800145a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145c:	4a16      	ldr	r2, [pc, #88]	; (80014b8 <HAL_I2C_MspInit+0xac>)
 800145e:	f043 0302 	orr.w	r3, r3, #2
 8001462:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <HAL_I2C_MspInit+0xac>)
 8001466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001470:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001474:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001476:	2312      	movs	r3, #18
 8001478:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147e:	2300      	movs	r3, #0
 8001480:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001482:	2304      	movs	r3, #4
 8001484:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001486:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800148a:	4619      	mov	r1, r3
 800148c:	480b      	ldr	r0, [pc, #44]	; (80014bc <HAL_I2C_MspInit+0xb0>)
 800148e:	f000 fad3 	bl	8001a38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_I2C_MspInit+0xac>)
 8001494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001496:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <HAL_I2C_MspInit+0xac>)
 8001498:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800149c:	6593      	str	r3, [r2, #88]	; 0x58
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_I2C_MspInit+0xac>)
 80014a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014aa:	bf00      	nop
 80014ac:	3768      	adds	r7, #104	; 0x68
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40005400 	.word	0x40005400
 80014b8:	40021000 	.word	0x40021000
 80014bc:	48000400 	.word	0x48000400

080014c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b09a      	sub	sp, #104	; 0x68
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014d8:	f107 0310 	add.w	r3, r7, #16
 80014dc:	2244      	movs	r2, #68	; 0x44
 80014de:	2100      	movs	r1, #0
 80014e0:	4618      	mov	r0, r3
 80014e2:	f003 f91d 	bl	8004720 <memset>
  if(huart->Instance==USART2)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a1f      	ldr	r2, [pc, #124]	; (8001568 <HAL_UART_MspInit+0xa8>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d136      	bne.n	800155e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014f0:	2302      	movs	r3, #2
 80014f2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f8:	f107 0310 	add.w	r3, r7, #16
 80014fc:	4618      	mov	r0, r3
 80014fe:	f002 f921 	bl	8003744 <HAL_RCCEx_PeriphCLKConfig>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001508:	f7ff fdba 	bl	8001080 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800150c:	4b17      	ldr	r3, [pc, #92]	; (800156c <HAL_UART_MspInit+0xac>)
 800150e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001510:	4a16      	ldr	r2, [pc, #88]	; (800156c <HAL_UART_MspInit+0xac>)
 8001512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001516:	6593      	str	r3, [r2, #88]	; 0x58
 8001518:	4b14      	ldr	r3, [pc, #80]	; (800156c <HAL_UART_MspInit+0xac>)
 800151a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <HAL_UART_MspInit+0xac>)
 8001526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001528:	4a10      	ldr	r2, [pc, #64]	; (800156c <HAL_UART_MspInit+0xac>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001530:	4b0e      	ldr	r3, [pc, #56]	; (800156c <HAL_UART_MspInit+0xac>)
 8001532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800153c:	230c      	movs	r3, #12
 800153e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2300      	movs	r3, #0
 800154a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800154c:	2307      	movs	r3, #7
 800154e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001550:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001554:	4619      	mov	r1, r3
 8001556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155a:	f000 fa6d 	bl	8001a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800155e:	bf00      	nop
 8001560:	3768      	adds	r7, #104	; 0x68
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40004400 	.word	0x40004400
 800156c:	40021000 	.word	0x40021000

08001570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <NMI_Handler+0x4>

08001576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157a:	e7fe      	b.n	800157a <HardFault_Handler+0x4>

0800157c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <MemManage_Handler+0x4>

08001582 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001586:	e7fe      	b.n	8001586 <BusFault_Handler+0x4>

08001588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800158c:	e7fe      	b.n	800158c <UsageFault_Handler+0x4>

0800158e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015bc:	f000 f918 	bl	80017f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
 80015d4:	e00a      	b.n	80015ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015d6:	f3af 8000 	nop.w
 80015da:	4601      	mov	r1, r0
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	1c5a      	adds	r2, r3, #1
 80015e0:	60ba      	str	r2, [r7, #8]
 80015e2:	b2ca      	uxtb	r2, r1
 80015e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	3301      	adds	r3, #1
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	dbf0      	blt.n	80015d6 <_read+0x12>
  }

  return len;
 80015f4:	687b      	ldr	r3, [r7, #4]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <_close>:
  }
  return len;
}

int _close(int file)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001606:	f04f 33ff 	mov.w	r3, #4294967295
}
 800160a:	4618      	mov	r0, r3
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001626:	605a      	str	r2, [r3, #4]
  return 0;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <_isatty>:

int _isatty(int file)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800163e:	2301      	movs	r3, #1
}
 8001640:	4618      	mov	r0, r3
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001670:	4a14      	ldr	r2, [pc, #80]	; (80016c4 <_sbrk+0x5c>)
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <_sbrk+0x60>)
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800167c:	4b13      	ldr	r3, [pc, #76]	; (80016cc <_sbrk+0x64>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d102      	bne.n	800168a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <_sbrk+0x64>)
 8001686:	4a12      	ldr	r2, [pc, #72]	; (80016d0 <_sbrk+0x68>)
 8001688:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <_sbrk+0x64>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	429a      	cmp	r2, r3
 8001696:	d207      	bcs.n	80016a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001698:	f003 f818 	bl	80046cc <__errno>
 800169c:	4603      	mov	r3, r0
 800169e:	220c      	movs	r2, #12
 80016a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016a2:	f04f 33ff 	mov.w	r3, #4294967295
 80016a6:	e009      	b.n	80016bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <_sbrk+0x64>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ae:	4b07      	ldr	r3, [pc, #28]	; (80016cc <_sbrk+0x64>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	4a05      	ldr	r2, [pc, #20]	; (80016cc <_sbrk+0x64>)
 80016b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ba:	68fb      	ldr	r3, [r7, #12]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20008000 	.word	0x20008000
 80016c8:	00000400 	.word	0x00000400
 80016cc:	20000184 	.word	0x20000184
 80016d0:	200001a0 	.word	0x200001a0

080016d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <SystemInit+0x20>)
 80016da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016de:	4a05      	ldr	r2, [pc, #20]	; (80016f4 <SystemInit+0x20>)
 80016e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016f8:	480d      	ldr	r0, [pc, #52]	; (8001730 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016fc:	480d      	ldr	r0, [pc, #52]	; (8001734 <LoopForever+0x6>)
  ldr r1, =_edata
 80016fe:	490e      	ldr	r1, [pc, #56]	; (8001738 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001700:	4a0e      	ldr	r2, [pc, #56]	; (800173c <LoopForever+0xe>)
  movs r3, #0
 8001702:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001704:	e002      	b.n	800170c <LoopCopyDataInit>

08001706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800170a:	3304      	adds	r3, #4

0800170c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800170c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001710:	d3f9      	bcc.n	8001706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001712:	4a0b      	ldr	r2, [pc, #44]	; (8001740 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001714:	4c0b      	ldr	r4, [pc, #44]	; (8001744 <LoopForever+0x16>)
  movs r3, #0
 8001716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001718:	e001      	b.n	800171e <LoopFillZerobss>

0800171a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800171a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800171c:	3204      	adds	r2, #4

0800171e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001720:	d3fb      	bcc.n	800171a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001722:	f7ff ffd7 	bl	80016d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001726:	f002 ffd7 	bl	80046d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800172a:	f7ff fb3c 	bl	8000da6 <main>

0800172e <LoopForever>:

LoopForever:
    b LoopForever
 800172e:	e7fe      	b.n	800172e <LoopForever>
  ldr   r0, =_estack
 8001730:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001738:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800173c:	080053ac 	.word	0x080053ac
  ldr r2, =_sbss
 8001740:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001744:	2000019c 	.word	0x2000019c

08001748 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001748:	e7fe      	b.n	8001748 <ADC1_2_IRQHandler>

0800174a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001750:	2300      	movs	r3, #0
 8001752:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001754:	2003      	movs	r0, #3
 8001756:	f000 f93d 	bl	80019d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800175a:	2000      	movs	r0, #0
 800175c:	f000 f80e 	bl	800177c <HAL_InitTick>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d002      	beq.n	800176c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	71fb      	strb	r3, [r7, #7]
 800176a:	e001      	b.n	8001770 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800176c:	f7ff fe2a 	bl	80013c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001770:	79fb      	ldrb	r3, [r7, #7]

}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001788:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <HAL_InitTick+0x68>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d022      	beq.n	80017d6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001790:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <HAL_InitTick+0x6c>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <HAL_InitTick+0x68>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800179c:	fbb1 f3f3 	udiv	r3, r1, r3
 80017a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 f93a 	bl	8001a1e <HAL_SYSTICK_Config>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10f      	bne.n	80017d0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b0f      	cmp	r3, #15
 80017b4:	d809      	bhi.n	80017ca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b6:	2200      	movs	r2, #0
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	f04f 30ff 	mov.w	r0, #4294967295
 80017be:	f000 f914 	bl	80019ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017c2:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <HAL_InitTick+0x70>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	e007      	b.n	80017da <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	73fb      	strb	r3, [r7, #15]
 80017ce:	e004      	b.n	80017da <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	73fb      	strb	r3, [r7, #15]
 80017d4:	e001      	b.n	80017da <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017da:	7bfb      	ldrb	r3, [r7, #15]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000008 	.word	0x20000008
 80017e8:	20000000 	.word	0x20000000
 80017ec:	20000004 	.word	0x20000004

080017f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <HAL_IncTick+0x1c>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <HAL_IncTick+0x20>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4413      	add	r3, r2
 80017fe:	4a03      	ldr	r2, [pc, #12]	; (800180c <HAL_IncTick+0x1c>)
 8001800:	6013      	str	r3, [r2, #0]
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	20000188 	.word	0x20000188
 8001810:	20000008 	.word	0x20000008

08001814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return uwTick;
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <HAL_GetTick+0x14>)
 800181a:	681b      	ldr	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	20000188 	.word	0x20000188

0800182c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001834:	f7ff ffee 	bl	8001814 <HAL_GetTick>
 8001838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001844:	d004      	beq.n	8001850 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <HAL_Delay+0x40>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	4413      	add	r3, r2
 800184e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001850:	bf00      	nop
 8001852:	f7ff ffdf 	bl	8001814 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	429a      	cmp	r2, r3
 8001860:	d8f7      	bhi.n	8001852 <HAL_Delay+0x26>
  {
  }
}
 8001862:	bf00      	nop
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000008 	.word	0x20000008

08001870 <__NVIC_SetPriorityGrouping>:
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800188c:	4013      	ands	r3, r2
 800188e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800189c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a2:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <__NVIC_SetPriorityGrouping+0x44>)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	60d3      	str	r3, [r2, #12]
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <__NVIC_GetPriorityGrouping>:
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018bc:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <__NVIC_GetPriorityGrouping+0x18>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	f003 0307 	and.w	r3, r3, #7
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <__NVIC_SetPriority>:
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	6039      	str	r1, [r7, #0]
 80018de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	db0a      	blt.n	80018fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	490c      	ldr	r1, [pc, #48]	; (8001920 <__NVIC_SetPriority+0x4c>)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	0112      	lsls	r2, r2, #4
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	440b      	add	r3, r1
 80018f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80018fc:	e00a      	b.n	8001914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4908      	ldr	r1, [pc, #32]	; (8001924 <__NVIC_SetPriority+0x50>)
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	3b04      	subs	r3, #4
 800190c:	0112      	lsls	r2, r2, #4
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	440b      	add	r3, r1
 8001912:	761a      	strb	r2, [r3, #24]
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000e100 	.word	0xe000e100
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <NVIC_EncodePriority>:
{
 8001928:	b480      	push	{r7}
 800192a:	b089      	sub	sp, #36	; 0x24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f1c3 0307 	rsb	r3, r3, #7
 8001942:	2b04      	cmp	r3, #4
 8001944:	bf28      	it	cs
 8001946:	2304      	movcs	r3, #4
 8001948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3304      	adds	r3, #4
 800194e:	2b06      	cmp	r3, #6
 8001950:	d902      	bls.n	8001958 <NVIC_EncodePriority+0x30>
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3b03      	subs	r3, #3
 8001956:	e000      	b.n	800195a <NVIC_EncodePriority+0x32>
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800195c:	f04f 32ff 	mov.w	r2, #4294967295
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43da      	mvns	r2, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	401a      	ands	r2, r3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001970:	f04f 31ff 	mov.w	r1, #4294967295
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	fa01 f303 	lsl.w	r3, r1, r3
 800197a:	43d9      	mvns	r1, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001980:	4313      	orrs	r3, r2
}
 8001982:	4618      	mov	r0, r3
 8001984:	3724      	adds	r7, #36	; 0x24
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <SysTick_Config>:
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a0:	d301      	bcc.n	80019a6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80019a2:	2301      	movs	r3, #1
 80019a4:	e00f      	b.n	80019c6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a6:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <SysTick_Config+0x40>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ae:	210f      	movs	r1, #15
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295
 80019b4:	f7ff ff8e 	bl	80018d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b8:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <SysTick_Config+0x40>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019be:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <SysTick_Config+0x40>)
 80019c0:	2207      	movs	r2, #7
 80019c2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	e000e010 	.word	0xe000e010

080019d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ff47 	bl	8001870 <__NVIC_SetPriorityGrouping>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
 80019f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019f8:	f7ff ff5e 	bl	80018b8 <__NVIC_GetPriorityGrouping>
 80019fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	6978      	ldr	r0, [r7, #20]
 8001a04:	f7ff ff90 	bl	8001928 <NVIC_EncodePriority>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff5f 	bl	80018d4 <__NVIC_SetPriority>
}
 8001a16:	bf00      	nop
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ffb2 	bl	8001990 <SysTick_Config>
 8001a2c:	4603      	mov	r3, r0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b087      	sub	sp, #28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a46:	e15a      	b.n	8001cfe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	fa01 f303 	lsl.w	r3, r1, r3
 8001a54:	4013      	ands	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 814c 	beq.w	8001cf8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d005      	beq.n	8001a78 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d130      	bne.n	8001ada <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	2203      	movs	r2, #3
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aae:	2201      	movs	r2, #1
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4013      	ands	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	091b      	lsrs	r3, r3, #4
 8001ac4:	f003 0201 	and.w	r2, r3, #1
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d017      	beq.n	8001b16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	2203      	movs	r2, #3
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4013      	ands	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	689a      	ldr	r2, [r3, #8]
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d123      	bne.n	8001b6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	08da      	lsrs	r2, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3208      	adds	r2, #8
 8001b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	220f      	movs	r2, #15
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4013      	ands	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	691a      	ldr	r2, [r3, #16]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	08da      	lsrs	r2, r3, #3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3208      	adds	r2, #8
 8001b64:	6939      	ldr	r1, [r7, #16]
 8001b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	2203      	movs	r2, #3
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 0203 	and.w	r2, r3, #3
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 80a6 	beq.w	8001cf8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bac:	4b5b      	ldr	r3, [pc, #364]	; (8001d1c <HAL_GPIO_Init+0x2e4>)
 8001bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb0:	4a5a      	ldr	r2, [pc, #360]	; (8001d1c <HAL_GPIO_Init+0x2e4>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	6613      	str	r3, [r2, #96]	; 0x60
 8001bb8:	4b58      	ldr	r3, [pc, #352]	; (8001d1c <HAL_GPIO_Init+0x2e4>)
 8001bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bc4:	4a56      	ldr	r2, [pc, #344]	; (8001d20 <HAL_GPIO_Init+0x2e8>)
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	089b      	lsrs	r3, r3, #2
 8001bca:	3302      	adds	r3, #2
 8001bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	220f      	movs	r2, #15
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4013      	ands	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bee:	d01f      	beq.n	8001c30 <HAL_GPIO_Init+0x1f8>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a4c      	ldr	r2, [pc, #304]	; (8001d24 <HAL_GPIO_Init+0x2ec>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d019      	beq.n	8001c2c <HAL_GPIO_Init+0x1f4>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a4b      	ldr	r2, [pc, #300]	; (8001d28 <HAL_GPIO_Init+0x2f0>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d013      	beq.n	8001c28 <HAL_GPIO_Init+0x1f0>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a4a      	ldr	r2, [pc, #296]	; (8001d2c <HAL_GPIO_Init+0x2f4>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d00d      	beq.n	8001c24 <HAL_GPIO_Init+0x1ec>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a49      	ldr	r2, [pc, #292]	; (8001d30 <HAL_GPIO_Init+0x2f8>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d007      	beq.n	8001c20 <HAL_GPIO_Init+0x1e8>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a48      	ldr	r2, [pc, #288]	; (8001d34 <HAL_GPIO_Init+0x2fc>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d101      	bne.n	8001c1c <HAL_GPIO_Init+0x1e4>
 8001c18:	2305      	movs	r3, #5
 8001c1a:	e00a      	b.n	8001c32 <HAL_GPIO_Init+0x1fa>
 8001c1c:	2306      	movs	r3, #6
 8001c1e:	e008      	b.n	8001c32 <HAL_GPIO_Init+0x1fa>
 8001c20:	2304      	movs	r3, #4
 8001c22:	e006      	b.n	8001c32 <HAL_GPIO_Init+0x1fa>
 8001c24:	2303      	movs	r3, #3
 8001c26:	e004      	b.n	8001c32 <HAL_GPIO_Init+0x1fa>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e002      	b.n	8001c32 <HAL_GPIO_Init+0x1fa>
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e000      	b.n	8001c32 <HAL_GPIO_Init+0x1fa>
 8001c30:	2300      	movs	r3, #0
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	f002 0203 	and.w	r2, r2, #3
 8001c38:	0092      	lsls	r2, r2, #2
 8001c3a:	4093      	lsls	r3, r2
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c42:	4937      	ldr	r1, [pc, #220]	; (8001d20 <HAL_GPIO_Init+0x2e8>)
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	089b      	lsrs	r3, r3, #2
 8001c48:	3302      	adds	r3, #2
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c50:	4b39      	ldr	r3, [pc, #228]	; (8001d38 <HAL_GPIO_Init+0x300>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c74:	4a30      	ldr	r2, [pc, #192]	; (8001d38 <HAL_GPIO_Init+0x300>)
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c7a:	4b2f      	ldr	r3, [pc, #188]	; (8001d38 <HAL_GPIO_Init+0x300>)
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4013      	ands	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c9e:	4a26      	ldr	r2, [pc, #152]	; (8001d38 <HAL_GPIO_Init+0x300>)
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ca4:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <HAL_GPIO_Init+0x300>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	43db      	mvns	r3, r3
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cc8:	4a1b      	ldr	r2, [pc, #108]	; (8001d38 <HAL_GPIO_Init+0x300>)
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001cce:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <HAL_GPIO_Init+0x300>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cf2:	4a11      	ldr	r2, [pc, #68]	; (8001d38 <HAL_GPIO_Init+0x300>)
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	fa22 f303 	lsr.w	r3, r2, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f47f ae9d 	bne.w	8001a48 <HAL_GPIO_Init+0x10>
  }
}
 8001d0e:	bf00      	nop
 8001d10:	bf00      	nop
 8001d12:	371c      	adds	r7, #28
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40010000 	.word	0x40010000
 8001d24:	48000400 	.word	0x48000400
 8001d28:	48000800 	.word	0x48000800
 8001d2c:	48000c00 	.word	0x48000c00
 8001d30:	48001000 	.word	0x48001000
 8001d34:	48001400 	.word	0x48001400
 8001d38:	40010400 	.word	0x40010400

08001d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	807b      	strh	r3, [r7, #2]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d4c:	787b      	ldrb	r3, [r7, #1]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d52:	887a      	ldrh	r2, [r7, #2]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d58:	e002      	b.n	8001d60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d5a:	887a      	ldrh	r2, [r7, #2]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e081      	b.n	8001e82 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d106      	bne.n	8001d98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff fb3a 	bl	800140c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2224      	movs	r2, #36	; 0x24
 8001d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0201 	bic.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dbc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dcc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d107      	bne.n	8001de6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	e006      	b.n	8001df4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001df2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d104      	bne.n	8001e06 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6812      	ldr	r2, [r2, #0]
 8001e10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691a      	ldr	r2, [r3, #16]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69d9      	ldr	r1, [r3, #28]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a1a      	ldr	r2, [r3, #32]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0201 	orr.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2220      	movs	r2, #32
 8001e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af02      	add	r7, sp, #8
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	4608      	mov	r0, r1
 8001e96:	4611      	mov	r1, r2
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	817b      	strh	r3, [r7, #10]
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	813b      	strh	r3, [r7, #8]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b20      	cmp	r3, #32
 8001eb0:	f040 80f9 	bne.w	80020a6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eb4:	6a3b      	ldr	r3, [r7, #32]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <HAL_I2C_Mem_Write+0x34>
 8001eba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d105      	bne.n	8001ecc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ec6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0ed      	b.n	80020a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d101      	bne.n	8001eda <HAL_I2C_Mem_Write+0x4e>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e0e6      	b.n	80020a8 <HAL_I2C_Mem_Write+0x21c>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ee2:	f7ff fc97 	bl	8001814 <HAL_GetTick>
 8001ee6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	2319      	movs	r3, #25
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f000 fbcb 	bl	8002690 <I2C_WaitOnFlagUntilTimeout>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0d1      	b.n	80020a8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2221      	movs	r2, #33	; 0x21
 8001f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2240      	movs	r2, #64	; 0x40
 8001f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6a3a      	ldr	r2, [r7, #32]
 8001f1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f2c:	88f8      	ldrh	r0, [r7, #6]
 8001f2e:	893a      	ldrh	r2, [r7, #8]
 8001f30:	8979      	ldrh	r1, [r7, #10]
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	9301      	str	r3, [sp, #4]
 8001f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 fadb 	bl	80024f8 <I2C_RequestMemoryWrite>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d005      	beq.n	8001f54 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e0a9      	b.n	80020a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	2bff      	cmp	r3, #255	; 0xff
 8001f5c:	d90e      	bls.n	8001f7c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	22ff      	movs	r2, #255	; 0xff
 8001f62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	8979      	ldrh	r1, [r7, #10]
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f000 fd33 	bl	80029e0 <I2C_TransferConfig>
 8001f7a:	e00f      	b.n	8001f9c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	8979      	ldrh	r1, [r7, #10]
 8001f8e:	2300      	movs	r3, #0
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f000 fd22 	bl	80029e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f000 fbb5 	bl	8002710 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e07b      	b.n	80020a8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	781a      	ldrb	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	1c5a      	adds	r2, r3, #1
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d034      	beq.n	8002054 <HAL_I2C_Mem_Write+0x1c8>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d130      	bne.n	8002054 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2180      	movs	r1, #128	; 0x80
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f000 fb47 	bl	8002690 <I2C_WaitOnFlagUntilTimeout>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e04d      	b.n	80020a8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002010:	b29b      	uxth	r3, r3
 8002012:	2bff      	cmp	r3, #255	; 0xff
 8002014:	d90e      	bls.n	8002034 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	22ff      	movs	r2, #255	; 0xff
 800201a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002020:	b2da      	uxtb	r2, r3
 8002022:	8979      	ldrh	r1, [r7, #10]
 8002024:	2300      	movs	r3, #0
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f000 fcd7 	bl	80029e0 <I2C_TransferConfig>
 8002032:	e00f      	b.n	8002054 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002038:	b29a      	uxth	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002042:	b2da      	uxtb	r2, r3
 8002044:	8979      	ldrh	r1, [r7, #10]
 8002046:	2300      	movs	r3, #0
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f000 fcc6 	bl	80029e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002058:	b29b      	uxth	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d19e      	bne.n	8001f9c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 fb94 	bl	8002790 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e01a      	b.n	80020a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2220      	movs	r2, #32
 8002078:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6859      	ldr	r1, [r3, #4]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <HAL_I2C_Mem_Write+0x224>)
 8002086:	400b      	ands	r3, r1
 8002088:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2220      	movs	r2, #32
 800208e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	e000      	b.n	80020a8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80020a6:	2302      	movs	r3, #2
  }
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	fe00e800 	.word	0xfe00e800

080020b4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af02      	add	r7, sp, #8
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	4608      	mov	r0, r1
 80020be:	4611      	mov	r1, r2
 80020c0:	461a      	mov	r2, r3
 80020c2:	4603      	mov	r3, r0
 80020c4:	817b      	strh	r3, [r7, #10]
 80020c6:	460b      	mov	r3, r1
 80020c8:	813b      	strh	r3, [r7, #8]
 80020ca:	4613      	mov	r3, r2
 80020cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b20      	cmp	r3, #32
 80020d8:	f040 80fd 	bne.w	80022d6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80020dc:	6a3b      	ldr	r3, [r7, #32]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <HAL_I2C_Mem_Read+0x34>
 80020e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d105      	bne.n	80020f4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0f1      	b.n	80022d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d101      	bne.n	8002102 <HAL_I2C_Mem_Read+0x4e>
 80020fe:	2302      	movs	r3, #2
 8002100:	e0ea      	b.n	80022d8 <HAL_I2C_Mem_Read+0x224>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800210a:	f7ff fb83 	bl	8001814 <HAL_GetTick>
 800210e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	2319      	movs	r3, #25
 8002116:	2201      	movs	r2, #1
 8002118:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f000 fab7 	bl	8002690 <I2C_WaitOnFlagUntilTimeout>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e0d5      	b.n	80022d8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2222      	movs	r2, #34	; 0x22
 8002130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2240      	movs	r2, #64	; 0x40
 8002138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a3a      	ldr	r2, [r7, #32]
 8002146:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800214c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002154:	88f8      	ldrh	r0, [r7, #6]
 8002156:	893a      	ldrh	r2, [r7, #8]
 8002158:	8979      	ldrh	r1, [r7, #10]
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	9301      	str	r3, [sp, #4]
 800215e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	4603      	mov	r3, r0
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f000 fa1b 	bl	80025a0 <I2C_RequestMemoryRead>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0ad      	b.n	80022d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002180:	b29b      	uxth	r3, r3
 8002182:	2bff      	cmp	r3, #255	; 0xff
 8002184:	d90e      	bls.n	80021a4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	22ff      	movs	r2, #255	; 0xff
 800218a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002190:	b2da      	uxtb	r2, r3
 8002192:	8979      	ldrh	r1, [r7, #10]
 8002194:	4b52      	ldr	r3, [pc, #328]	; (80022e0 <HAL_I2C_Mem_Read+0x22c>)
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 fc1f 	bl	80029e0 <I2C_TransferConfig>
 80021a2:	e00f      	b.n	80021c4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	8979      	ldrh	r1, [r7, #10]
 80021b6:	4b4a      	ldr	r3, [pc, #296]	; (80022e0 <HAL_I2C_Mem_Read+0x22c>)
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 fc0e 	bl	80029e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ca:	2200      	movs	r2, #0
 80021cc:	2104      	movs	r1, #4
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 fa5e 	bl	8002690 <I2C_WaitOnFlagUntilTimeout>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e07c      	b.n	80022d8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	1c5a      	adds	r2, r3, #1
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fa:	3b01      	subs	r3, #1
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002206:	b29b      	uxth	r3, r3
 8002208:	3b01      	subs	r3, #1
 800220a:	b29a      	uxth	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002214:	b29b      	uxth	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d034      	beq.n	8002284 <HAL_I2C_Mem_Read+0x1d0>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221e:	2b00      	cmp	r3, #0
 8002220:	d130      	bne.n	8002284 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002228:	2200      	movs	r2, #0
 800222a:	2180      	movs	r1, #128	; 0x80
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 fa2f 	bl	8002690 <I2C_WaitOnFlagUntilTimeout>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e04d      	b.n	80022d8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002240:	b29b      	uxth	r3, r3
 8002242:	2bff      	cmp	r3, #255	; 0xff
 8002244:	d90e      	bls.n	8002264 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	22ff      	movs	r2, #255	; 0xff
 800224a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002250:	b2da      	uxtb	r2, r3
 8002252:	8979      	ldrh	r1, [r7, #10]
 8002254:	2300      	movs	r3, #0
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 fbbf 	bl	80029e0 <I2C_TransferConfig>
 8002262:	e00f      	b.n	8002284 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002268:	b29a      	uxth	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002272:	b2da      	uxtb	r2, r3
 8002274:	8979      	ldrh	r1, [r7, #10]
 8002276:	2300      	movs	r3, #0
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 fbae 	bl	80029e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002288:	b29b      	uxth	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d19a      	bne.n	80021c4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 fa7c 	bl	8002790 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e01a      	b.n	80022d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2220      	movs	r2, #32
 80022a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6859      	ldr	r1, [r3, #4]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_I2C_Mem_Read+0x230>)
 80022b6:	400b      	ands	r3, r1
 80022b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2220      	movs	r2, #32
 80022be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022d2:	2300      	movs	r3, #0
 80022d4:	e000      	b.n	80022d8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80022d6:	2302      	movs	r3, #2
  }
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	80002400 	.word	0x80002400
 80022e4:	fe00e800 	.word	0xfe00e800

080022e8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08a      	sub	sp, #40	; 0x28
 80022ec:	af02      	add	r7, sp, #8
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	607a      	str	r2, [r7, #4]
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	460b      	mov	r3, r1
 80022f6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b20      	cmp	r3, #32
 8002306:	f040 80f1 	bne.w	80024ec <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002318:	d101      	bne.n	800231e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800231a:	2302      	movs	r3, #2
 800231c:	e0e7      	b.n	80024ee <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_I2C_IsDeviceReady+0x44>
 8002328:	2302      	movs	r3, #2
 800232a:	e0e0      	b.n	80024ee <HAL_I2C_IsDeviceReady+0x206>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2224      	movs	r2, #36	; 0x24
 8002338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d107      	bne.n	800235a <HAL_I2C_IsDeviceReady+0x72>
 800234a:	897b      	ldrh	r3, [r7, #10]
 800234c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002350:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002354:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002358:	e004      	b.n	8002364 <HAL_I2C_IsDeviceReady+0x7c>
 800235a:	897b      	ldrh	r3, [r7, #10]
 800235c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002360:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800236a:	f7ff fa53 	bl	8001814 <HAL_GetTick>
 800236e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	f003 0320 	and.w	r3, r3, #32
 800237a:	2b20      	cmp	r3, #32
 800237c:	bf0c      	ite	eq
 800237e:	2301      	moveq	r3, #1
 8002380:	2300      	movne	r3, #0
 8002382:	b2db      	uxtb	r3, r3
 8002384:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	f003 0310 	and.w	r3, r3, #16
 8002390:	2b10      	cmp	r3, #16
 8002392:	bf0c      	ite	eq
 8002394:	2301      	moveq	r3, #1
 8002396:	2300      	movne	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800239c:	e034      	b.n	8002408 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a4:	d01a      	beq.n	80023dc <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023a6:	f7ff fa35 	bl	8001814 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d302      	bcc.n	80023bc <HAL_I2C_IsDeviceReady+0xd4>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10f      	bne.n	80023dc <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2220      	movs	r2, #32
 80023c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c8:	f043 0220 	orr.w	r2, r3, #32
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e088      	b.n	80024ee <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	f003 0320 	and.w	r3, r3, #32
 80023e6:	2b20      	cmp	r3, #32
 80023e8:	bf0c      	ite	eq
 80023ea:	2301      	moveq	r3, #1
 80023ec:	2300      	movne	r3, #0
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	f003 0310 	and.w	r3, r3, #16
 80023fc:	2b10      	cmp	r3, #16
 80023fe:	bf0c      	ite	eq
 8002400:	2301      	moveq	r3, #1
 8002402:	2300      	movne	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002408:	7ffb      	ldrb	r3, [r7, #31]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d102      	bne.n	8002414 <HAL_I2C_IsDeviceReady+0x12c>
 800240e:	7fbb      	ldrb	r3, [r7, #30]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0c4      	beq.n	800239e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	f003 0310 	and.w	r3, r3, #16
 800241e:	2b10      	cmp	r3, #16
 8002420:	d01a      	beq.n	8002458 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2200      	movs	r2, #0
 800242a:	2120      	movs	r1, #32
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 f92f 	bl	8002690 <I2C_WaitOnFlagUntilTimeout>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e058      	b.n	80024ee <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2220      	movs	r2, #32
 8002442:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	e04a      	b.n	80024ee <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	2200      	movs	r2, #0
 8002460:	2120      	movs	r1, #32
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 f914 	bl	8002690 <I2C_WaitOnFlagUntilTimeout>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e03d      	b.n	80024ee <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2210      	movs	r2, #16
 8002478:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2220      	movs	r2, #32
 8002480:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	429a      	cmp	r2, r3
 8002488:	d118      	bne.n	80024bc <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002498:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2200      	movs	r2, #0
 80024a2:	2120      	movs	r1, #32
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 f8f3 	bl	8002690 <I2C_WaitOnFlagUntilTimeout>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e01c      	b.n	80024ee <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2220      	movs	r2, #32
 80024ba:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	3301      	adds	r3, #1
 80024c0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	f63f af3b 	bhi.w	8002342 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2220      	movs	r2, #32
 80024d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d8:	f043 0220 	orr.w	r2, r3, #32
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e000      	b.n	80024ee <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80024ec:	2302      	movs	r3, #2
  }
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3720      	adds	r7, #32
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	4608      	mov	r0, r1
 8002502:	4611      	mov	r1, r2
 8002504:	461a      	mov	r2, r3
 8002506:	4603      	mov	r3, r0
 8002508:	817b      	strh	r3, [r7, #10]
 800250a:	460b      	mov	r3, r1
 800250c:	813b      	strh	r3, [r7, #8]
 800250e:	4613      	mov	r3, r2
 8002510:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002512:	88fb      	ldrh	r3, [r7, #6]
 8002514:	b2da      	uxtb	r2, r3
 8002516:	8979      	ldrh	r1, [r7, #10]
 8002518:	4b20      	ldr	r3, [pc, #128]	; (800259c <I2C_RequestMemoryWrite+0xa4>)
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 fa5d 	bl	80029e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002526:	69fa      	ldr	r2, [r7, #28]
 8002528:	69b9      	ldr	r1, [r7, #24]
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 f8f0 	bl	8002710 <I2C_WaitOnTXISFlagUntilTimeout>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e02c      	b.n	8002594 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800253a:	88fb      	ldrh	r3, [r7, #6]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d105      	bne.n	800254c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002540:	893b      	ldrh	r3, [r7, #8]
 8002542:	b2da      	uxtb	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	629a      	str	r2, [r3, #40]	; 0x28
 800254a:	e015      	b.n	8002578 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800254c:	893b      	ldrh	r3, [r7, #8]
 800254e:	0a1b      	lsrs	r3, r3, #8
 8002550:	b29b      	uxth	r3, r3
 8002552:	b2da      	uxtb	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800255a:	69fa      	ldr	r2, [r7, #28]
 800255c:	69b9      	ldr	r1, [r7, #24]
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 f8d6 	bl	8002710 <I2C_WaitOnTXISFlagUntilTimeout>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e012      	b.n	8002594 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800256e:	893b      	ldrh	r3, [r7, #8]
 8002570:	b2da      	uxtb	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	2200      	movs	r2, #0
 8002580:	2180      	movs	r1, #128	; 0x80
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 f884 	bl	8002690 <I2C_WaitOnFlagUntilTimeout>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	80002000 	.word	0x80002000

080025a0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af02      	add	r7, sp, #8
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	4608      	mov	r0, r1
 80025aa:	4611      	mov	r1, r2
 80025ac:	461a      	mov	r2, r3
 80025ae:	4603      	mov	r3, r0
 80025b0:	817b      	strh	r3, [r7, #10]
 80025b2:	460b      	mov	r3, r1
 80025b4:	813b      	strh	r3, [r7, #8]
 80025b6:	4613      	mov	r3, r2
 80025b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80025ba:	88fb      	ldrh	r3, [r7, #6]
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	8979      	ldrh	r1, [r7, #10]
 80025c0:	4b20      	ldr	r3, [pc, #128]	; (8002644 <I2C_RequestMemoryRead+0xa4>)
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	2300      	movs	r3, #0
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 fa0a 	bl	80029e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025cc:	69fa      	ldr	r2, [r7, #28]
 80025ce:	69b9      	ldr	r1, [r7, #24]
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 f89d 	bl	8002710 <I2C_WaitOnTXISFlagUntilTimeout>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e02c      	b.n	800263a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025e0:	88fb      	ldrh	r3, [r7, #6]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d105      	bne.n	80025f2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025e6:	893b      	ldrh	r3, [r7, #8]
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	629a      	str	r2, [r3, #40]	; 0x28
 80025f0:	e015      	b.n	800261e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80025f2:	893b      	ldrh	r3, [r7, #8]
 80025f4:	0a1b      	lsrs	r3, r3, #8
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002600:	69fa      	ldr	r2, [r7, #28]
 8002602:	69b9      	ldr	r1, [r7, #24]
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 f883 	bl	8002710 <I2C_WaitOnTXISFlagUntilTimeout>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e012      	b.n	800263a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002614:	893b      	ldrh	r3, [r7, #8]
 8002616:	b2da      	uxtb	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	2200      	movs	r2, #0
 8002626:	2140      	movs	r1, #64	; 0x40
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 f831 	bl	8002690 <I2C_WaitOnFlagUntilTimeout>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e000      	b.n	800263a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	80002000 	.word	0x80002000

08002648 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b02      	cmp	r3, #2
 800265c:	d103      	bne.n	8002666 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2200      	movs	r2, #0
 8002664:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b01      	cmp	r3, #1
 8002672:	d007      	beq.n	8002684 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	699a      	ldr	r2, [r3, #24]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0201 	orr.w	r2, r2, #1
 8002682:	619a      	str	r2, [r3, #24]
  }
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	603b      	str	r3, [r7, #0]
 800269c:	4613      	mov	r3, r2
 800269e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026a0:	e022      	b.n	80026e8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a8:	d01e      	beq.n	80026e8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026aa:	f7ff f8b3 	bl	8001814 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d302      	bcc.n	80026c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d113      	bne.n	80026e8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c4:	f043 0220 	orr.w	r2, r3, #32
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e00f      	b.n	8002708 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699a      	ldr	r2, [r3, #24]
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	4013      	ands	r3, r2
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	bf0c      	ite	eq
 80026f8:	2301      	moveq	r3, #1
 80026fa:	2300      	movne	r3, #0
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	461a      	mov	r2, r3
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	429a      	cmp	r2, r3
 8002704:	d0cd      	beq.n	80026a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800271c:	e02c      	b.n	8002778 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f870 	bl	8002808 <I2C_IsErrorOccurred>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e02a      	b.n	8002788 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002738:	d01e      	beq.n	8002778 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800273a:	f7ff f86b 	bl	8001814 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	429a      	cmp	r2, r3
 8002748:	d302      	bcc.n	8002750 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d113      	bne.n	8002778 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002754:	f043 0220 	orr.w	r2, r3, #32
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2220      	movs	r2, #32
 8002760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e007      	b.n	8002788 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b02      	cmp	r3, #2
 8002784:	d1cb      	bne.n	800271e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800279c:	e028      	b.n	80027f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 f830 	bl	8002808 <I2C_IsErrorOccurred>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e026      	b.n	8002800 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027b2:	f7ff f82f 	bl	8001814 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d302      	bcc.n	80027c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d113      	bne.n	80027f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027cc:	f043 0220 	orr.w	r2, r3, #32
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e007      	b.n	8002800 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	f003 0320 	and.w	r3, r3, #32
 80027fa:	2b20      	cmp	r3, #32
 80027fc:	d1cf      	bne.n	800279e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08a      	sub	sp, #40	; 0x28
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002814:	2300      	movs	r3, #0
 8002816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002822:	2300      	movs	r3, #0
 8002824:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	f003 0310 	and.w	r3, r3, #16
 8002830:	2b00      	cmp	r3, #0
 8002832:	d075      	beq.n	8002920 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2210      	movs	r2, #16
 800283a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800283c:	e056      	b.n	80028ec <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002844:	d052      	beq.n	80028ec <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002846:	f7fe ffe5 	bl	8001814 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	429a      	cmp	r2, r3
 8002854:	d302      	bcc.n	800285c <I2C_IsErrorOccurred+0x54>
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d147      	bne.n	80028ec <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002866:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800286e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800287a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800287e:	d12e      	bne.n	80028de <I2C_IsErrorOccurred+0xd6>
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002886:	d02a      	beq.n	80028de <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002888:	7cfb      	ldrb	r3, [r7, #19]
 800288a:	2b20      	cmp	r3, #32
 800288c:	d027      	beq.n	80028de <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800289c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800289e:	f7fe ffb9 	bl	8001814 <HAL_GetTick>
 80028a2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028a4:	e01b      	b.n	80028de <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80028a6:	f7fe ffb5 	bl	8001814 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b19      	cmp	r3, #25
 80028b2:	d914      	bls.n	80028de <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b8:	f043 0220 	orr.w	r2, r3, #32
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	f003 0320 	and.w	r3, r3, #32
 80028e8:	2b20      	cmp	r3, #32
 80028ea:	d1dc      	bne.n	80028a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	f003 0320 	and.w	r3, r3, #32
 80028f6:	2b20      	cmp	r3, #32
 80028f8:	d003      	beq.n	8002902 <I2C_IsErrorOccurred+0xfa>
 80028fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d09d      	beq.n	800283e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002902:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002906:	2b00      	cmp	r3, #0
 8002908:	d103      	bne.n	8002912 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2220      	movs	r2, #32
 8002910:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	f043 0304 	orr.w	r3, r3, #4
 8002918:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00b      	beq.n	800294a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002942:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00b      	beq.n	800296c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	f043 0308 	orr.w	r3, r3, #8
 800295a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002964:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00b      	beq.n	800298e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	f043 0302 	orr.w	r3, r3, #2
 800297c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002986:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800298e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002992:	2b00      	cmp	r3, #0
 8002994:	d01c      	beq.n	80029d0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f7ff fe56 	bl	8002648 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6859      	ldr	r1, [r3, #4]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <I2C_IsErrorOccurred+0x1d4>)
 80029a8:	400b      	ands	r3, r1
 80029aa:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	431a      	orrs	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2220      	movs	r2, #32
 80029bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80029d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3728      	adds	r7, #40	; 0x28
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	fe00e800 	.word	0xfe00e800

080029e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	607b      	str	r3, [r7, #4]
 80029ea:	460b      	mov	r3, r1
 80029ec:	817b      	strh	r3, [r7, #10]
 80029ee:	4613      	mov	r3, r2
 80029f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029f2:	897b      	ldrh	r3, [r7, #10]
 80029f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029f8:	7a7b      	ldrb	r3, [r7, #9]
 80029fa:	041b      	lsls	r3, r3, #16
 80029fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a00:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a0e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	0d5b      	lsrs	r3, r3, #21
 8002a1a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002a1e:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <I2C_TransferConfig+0x60>)
 8002a20:	430b      	orrs	r3, r1
 8002a22:	43db      	mvns	r3, r3
 8002a24:	ea02 0103 	and.w	r1, r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a32:	bf00      	nop
 8002a34:	371c      	adds	r7, #28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	03ff63ff 	.word	0x03ff63ff

08002a44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b20      	cmp	r3, #32
 8002a58:	d138      	bne.n	8002acc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e032      	b.n	8002ace <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2224      	movs	r2, #36	; 0x24
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0201 	bic.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6819      	ldr	r1, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2220      	movs	r2, #32
 8002abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	e000      	b.n	8002ace <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002acc:	2302      	movs	r3, #2
  }
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b085      	sub	sp, #20
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
 8002ae2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b20      	cmp	r3, #32
 8002aee:	d139      	bne.n	8002b64 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e033      	b.n	8002b66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2224      	movs	r2, #36	; 0x24
 8002b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0201 	bic.w	r2, r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b2c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	021b      	lsls	r3, r3, #8
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0201 	orr.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	e000      	b.n	8002b66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b64:	2302      	movs	r3, #2
  }
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d141      	bne.n	8002c06 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b82:	4b4b      	ldr	r3, [pc, #300]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b8e:	d131      	bne.n	8002bf4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b90:	4b47      	ldr	r3, [pc, #284]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b96:	4a46      	ldr	r2, [pc, #280]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ba0:	4b43      	ldr	r3, [pc, #268]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ba8:	4a41      	ldr	r2, [pc, #260]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002baa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bb0:	4b40      	ldr	r3, [pc, #256]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2232      	movs	r2, #50	; 0x32
 8002bb6:	fb02 f303 	mul.w	r3, r2, r3
 8002bba:	4a3f      	ldr	r2, [pc, #252]	; (8002cb8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc0:	0c9b      	lsrs	r3, r3, #18
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bc6:	e002      	b.n	8002bce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bce:	4b38      	ldr	r3, [pc, #224]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bda:	d102      	bne.n	8002be2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f2      	bne.n	8002bc8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002be2:	4b33      	ldr	r3, [pc, #204]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bee:	d158      	bne.n	8002ca2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e057      	b.n	8002ca4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bf4:	4b2e      	ldr	r3, [pc, #184]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bfa:	4a2d      	ldr	r2, [pc, #180]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c04:	e04d      	b.n	8002ca2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c0c:	d141      	bne.n	8002c92 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c0e:	4b28      	ldr	r3, [pc, #160]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c1a:	d131      	bne.n	8002c80 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c1c:	4b24      	ldr	r3, [pc, #144]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c22:	4a23      	ldr	r2, [pc, #140]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c2c:	4b20      	ldr	r3, [pc, #128]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c34:	4a1e      	ldr	r2, [pc, #120]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c3c:	4b1d      	ldr	r3, [pc, #116]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2232      	movs	r2, #50	; 0x32
 8002c42:	fb02 f303 	mul.w	r3, r2, r3
 8002c46:	4a1c      	ldr	r2, [pc, #112]	; (8002cb8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c48:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4c:	0c9b      	lsrs	r3, r3, #18
 8002c4e:	3301      	adds	r3, #1
 8002c50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c52:	e002      	b.n	8002c5a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c5a:	4b15      	ldr	r3, [pc, #84]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c66:	d102      	bne.n	8002c6e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f2      	bne.n	8002c54 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c6e:	4b10      	ldr	r3, [pc, #64]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7a:	d112      	bne.n	8002ca2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e011      	b.n	8002ca4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c80:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c86:	4a0a      	ldr	r2, [pc, #40]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c90:	e007      	b.n	8002ca2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c92:	4b07      	ldr	r3, [pc, #28]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c9a:	4a05      	ldr	r2, [pc, #20]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ca0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	40007000 	.word	0x40007000
 8002cb4:	20000000 	.word	0x20000000
 8002cb8:	431bde83 	.word	0x431bde83

08002cbc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002cc0:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	4a04      	ldr	r2, [pc, #16]	; (8002cd8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002cc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cca:	6093      	str	r3, [r2, #8]
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40007000 	.word	0x40007000

08002cdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b088      	sub	sp, #32
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e306      	b.n	80032fc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d075      	beq.n	8002de6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cfa:	4b97      	ldr	r3, [pc, #604]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
 8002d02:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d04:	4b94      	ldr	r3, [pc, #592]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	2b0c      	cmp	r3, #12
 8002d12:	d102      	bne.n	8002d1a <HAL_RCC_OscConfig+0x3e>
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	d002      	beq.n	8002d20 <HAL_RCC_OscConfig+0x44>
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d10b      	bne.n	8002d38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d20:	4b8d      	ldr	r3, [pc, #564]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d05b      	beq.n	8002de4 <HAL_RCC_OscConfig+0x108>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d157      	bne.n	8002de4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e2e1      	b.n	80032fc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d40:	d106      	bne.n	8002d50 <HAL_RCC_OscConfig+0x74>
 8002d42:	4b85      	ldr	r3, [pc, #532]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a84      	ldr	r2, [pc, #528]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	e01d      	b.n	8002d8c <HAL_RCC_OscConfig+0xb0>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d58:	d10c      	bne.n	8002d74 <HAL_RCC_OscConfig+0x98>
 8002d5a:	4b7f      	ldr	r3, [pc, #508]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a7e      	ldr	r2, [pc, #504]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	4b7c      	ldr	r3, [pc, #496]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a7b      	ldr	r2, [pc, #492]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	e00b      	b.n	8002d8c <HAL_RCC_OscConfig+0xb0>
 8002d74:	4b78      	ldr	r3, [pc, #480]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a77      	ldr	r2, [pc, #476]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d7e:	6013      	str	r3, [r2, #0]
 8002d80:	4b75      	ldr	r3, [pc, #468]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a74      	ldr	r2, [pc, #464]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d013      	beq.n	8002dbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d94:	f7fe fd3e 	bl	8001814 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d9c:	f7fe fd3a 	bl	8001814 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b64      	cmp	r3, #100	; 0x64
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e2a6      	b.n	80032fc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dae:	4b6a      	ldr	r3, [pc, #424]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f0      	beq.n	8002d9c <HAL_RCC_OscConfig+0xc0>
 8002dba:	e014      	b.n	8002de6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbc:	f7fe fd2a 	bl	8001814 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc4:	f7fe fd26 	bl	8001814 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b64      	cmp	r3, #100	; 0x64
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e292      	b.n	80032fc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dd6:	4b60      	ldr	r3, [pc, #384]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0xe8>
 8002de2:	e000      	b.n	8002de6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d075      	beq.n	8002ede <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002df2:	4b59      	ldr	r3, [pc, #356]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 030c 	and.w	r3, r3, #12
 8002dfa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dfc:	4b56      	ldr	r3, [pc, #344]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	2b0c      	cmp	r3, #12
 8002e0a:	d102      	bne.n	8002e12 <HAL_RCC_OscConfig+0x136>
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d002      	beq.n	8002e18 <HAL_RCC_OscConfig+0x13c>
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d11f      	bne.n	8002e58 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e18:	4b4f      	ldr	r3, [pc, #316]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_OscConfig+0x154>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e265      	b.n	80032fc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e30:	4b49      	ldr	r3, [pc, #292]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	061b      	lsls	r3, r3, #24
 8002e3e:	4946      	ldr	r1, [pc, #280]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e44:	4b45      	ldr	r3, [pc, #276]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fe fc97 	bl	800177c <HAL_InitTick>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d043      	beq.n	8002edc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e251      	b.n	80032fc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d023      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e60:	4b3d      	ldr	r3, [pc, #244]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a3c      	ldr	r2, [pc, #240]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6c:	f7fe fcd2 	bl	8001814 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e74:	f7fe fcce 	bl	8001814 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e23a      	b.n	80032fc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e86:	4b34      	ldr	r3, [pc, #208]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d0f0      	beq.n	8002e74 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e92:	4b31      	ldr	r3, [pc, #196]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	061b      	lsls	r3, r3, #24
 8002ea0:	492d      	ldr	r1, [pc, #180]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	604b      	str	r3, [r1, #4]
 8002ea6:	e01a      	b.n	8002ede <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea8:	4b2b      	ldr	r3, [pc, #172]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a2a      	ldr	r2, [pc, #168]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002eae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb4:	f7fe fcae 	bl	8001814 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ebc:	f7fe fcaa 	bl	8001814 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e216      	b.n	80032fc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ece:	4b22      	ldr	r3, [pc, #136]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0x1e0>
 8002eda:	e000      	b.n	8002ede <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002edc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d041      	beq.n	8002f6e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d01c      	beq.n	8002f2c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ef2:	4b19      	ldr	r3, [pc, #100]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef8:	4a17      	ldr	r2, [pc, #92]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002efa:	f043 0301 	orr.w	r3, r3, #1
 8002efe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f02:	f7fe fc87 	bl	8001814 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f0a:	f7fe fc83 	bl	8001814 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e1ef      	b.n	80032fc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f1c:	4b0e      	ldr	r3, [pc, #56]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0ef      	beq.n	8002f0a <HAL_RCC_OscConfig+0x22e>
 8002f2a:	e020      	b.n	8002f6e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f2c:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f32:	4a09      	ldr	r2, [pc, #36]	; (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002f34:	f023 0301 	bic.w	r3, r3, #1
 8002f38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3c:	f7fe fc6a 	bl	8001814 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f42:	e00d      	b.n	8002f60 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f44:	f7fe fc66 	bl	8001814 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d906      	bls.n	8002f60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e1d2      	b.n	80032fc <HAL_RCC_OscConfig+0x620>
 8002f56:	bf00      	nop
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f60:	4b8c      	ldr	r3, [pc, #560]	; (8003194 <HAL_RCC_OscConfig+0x4b8>)
 8002f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1ea      	bne.n	8002f44 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 80a6 	beq.w	80030c8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f80:	4b84      	ldr	r3, [pc, #528]	; (8003194 <HAL_RCC_OscConfig+0x4b8>)
 8002f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_RCC_OscConfig+0x2b4>
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e000      	b.n	8002f92 <HAL_RCC_OscConfig+0x2b6>
 8002f90:	2300      	movs	r3, #0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00d      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f96:	4b7f      	ldr	r3, [pc, #508]	; (8003194 <HAL_RCC_OscConfig+0x4b8>)
 8002f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9a:	4a7e      	ldr	r2, [pc, #504]	; (8003194 <HAL_RCC_OscConfig+0x4b8>)
 8002f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa0:	6593      	str	r3, [r2, #88]	; 0x58
 8002fa2:	4b7c      	ldr	r3, [pc, #496]	; (8003194 <HAL_RCC_OscConfig+0x4b8>)
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fb2:	4b79      	ldr	r3, [pc, #484]	; (8003198 <HAL_RCC_OscConfig+0x4bc>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d118      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fbe:	4b76      	ldr	r3, [pc, #472]	; (8003198 <HAL_RCC_OscConfig+0x4bc>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a75      	ldr	r2, [pc, #468]	; (8003198 <HAL_RCC_OscConfig+0x4bc>)
 8002fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fca:	f7fe fc23 	bl	8001814 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd2:	f7fe fc1f 	bl	8001814 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e18b      	b.n	80032fc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fe4:	4b6c      	ldr	r3, [pc, #432]	; (8003198 <HAL_RCC_OscConfig+0x4bc>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d108      	bne.n	800300a <HAL_RCC_OscConfig+0x32e>
 8002ff8:	4b66      	ldr	r3, [pc, #408]	; (8003194 <HAL_RCC_OscConfig+0x4b8>)
 8002ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffe:	4a65      	ldr	r2, [pc, #404]	; (8003194 <HAL_RCC_OscConfig+0x4b8>)
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003008:	e024      	b.n	8003054 <HAL_RCC_OscConfig+0x378>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	2b05      	cmp	r3, #5
 8003010:	d110      	bne.n	8003034 <HAL_RCC_OscConfig+0x358>
 8003012:	4b60      	ldr	r3, [pc, #384]	; (8003194 <HAL_RCC_OscConfig+0x4b8>)
 8003014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003018:	4a5e      	ldr	r2, [pc, #376]	; (8003194 <HAL_RCC_OscConfig+0x4b8>)
 800301a:	f043 0304 	orr.w	r3, r3, #4
 800301e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003022:	4b5c      	ldr	r3, [pc, #368]	; (8003194 <HAL_RCC_OscConfig+0x4b8>)
 8003024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003028:	4a5a      	ldr	r2, [pc, #360]	; (8003194 <HAL_RCC_OscConfig+0x4b8>)
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003032:	e00f      	b.n	8003054 <HAL_RCC_OscConfig+0x378>
 8003034:	4b57      	ldr	r3, [pc, #348]	; (8003194 <HAL_RCC_OscConfig+0x4b8>)
 8003036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303a:	4a56      	ldr	r2, [pc, #344]	; (8003194 <HAL_RCC_OscConfig+0x4b8>)
 800303c:	f023 0301 	bic.w	r3, r3, #1
 8003040:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003044:	4b53      	ldr	r3, [pc, #332]	; (8003194 <HAL_RCC_OscConfig+0x4b8>)
 8003046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304a:	4a52      	ldr	r2, [pc, #328]	; (8003194 <HAL_RCC_OscConfig+0x4b8>)
 800304c:	f023 0304 	bic.w	r3, r3, #4
 8003050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d016      	beq.n	800308a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305c:	f7fe fbda 	bl	8001814 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003062:	e00a      	b.n	800307a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003064:	f7fe fbd6 	bl	8001814 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003072:	4293      	cmp	r3, r2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e140      	b.n	80032fc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800307a:	4b46      	ldr	r3, [pc, #280]	; (8003194 <HAL_RCC_OscConfig+0x4b8>)
 800307c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0ed      	beq.n	8003064 <HAL_RCC_OscConfig+0x388>
 8003088:	e015      	b.n	80030b6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308a:	f7fe fbc3 	bl	8001814 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003090:	e00a      	b.n	80030a8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003092:	f7fe fbbf 	bl	8001814 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e129      	b.n	80032fc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030a8:	4b3a      	ldr	r3, [pc, #232]	; (8003194 <HAL_RCC_OscConfig+0x4b8>)
 80030aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1ed      	bne.n	8003092 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030b6:	7ffb      	ldrb	r3, [r7, #31]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d105      	bne.n	80030c8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030bc:	4b35      	ldr	r3, [pc, #212]	; (8003194 <HAL_RCC_OscConfig+0x4b8>)
 80030be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c0:	4a34      	ldr	r2, [pc, #208]	; (8003194 <HAL_RCC_OscConfig+0x4b8>)
 80030c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0320 	and.w	r3, r3, #32
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d03c      	beq.n	800314e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d01c      	beq.n	8003116 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030dc:	4b2d      	ldr	r3, [pc, #180]	; (8003194 <HAL_RCC_OscConfig+0x4b8>)
 80030de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030e2:	4a2c      	ldr	r2, [pc, #176]	; (8003194 <HAL_RCC_OscConfig+0x4b8>)
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ec:	f7fe fb92 	bl	8001814 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030f4:	f7fe fb8e 	bl	8001814 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e0fa      	b.n	80032fc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003106:	4b23      	ldr	r3, [pc, #140]	; (8003194 <HAL_RCC_OscConfig+0x4b8>)
 8003108:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0ef      	beq.n	80030f4 <HAL_RCC_OscConfig+0x418>
 8003114:	e01b      	b.n	800314e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003116:	4b1f      	ldr	r3, [pc, #124]	; (8003194 <HAL_RCC_OscConfig+0x4b8>)
 8003118:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800311c:	4a1d      	ldr	r2, [pc, #116]	; (8003194 <HAL_RCC_OscConfig+0x4b8>)
 800311e:	f023 0301 	bic.w	r3, r3, #1
 8003122:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003126:	f7fe fb75 	bl	8001814 <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800312e:	f7fe fb71 	bl	8001814 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e0dd      	b.n	80032fc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003140:	4b14      	ldr	r3, [pc, #80]	; (8003194 <HAL_RCC_OscConfig+0x4b8>)
 8003142:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1ef      	bne.n	800312e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 80d1 	beq.w	80032fa <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003158:	4b0e      	ldr	r3, [pc, #56]	; (8003194 <HAL_RCC_OscConfig+0x4b8>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 030c 	and.w	r3, r3, #12
 8003160:	2b0c      	cmp	r3, #12
 8003162:	f000 808b 	beq.w	800327c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d15e      	bne.n	800322c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316e:	4b09      	ldr	r3, [pc, #36]	; (8003194 <HAL_RCC_OscConfig+0x4b8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a08      	ldr	r2, [pc, #32]	; (8003194 <HAL_RCC_OscConfig+0x4b8>)
 8003174:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003178:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317a:	f7fe fb4b 	bl	8001814 <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003180:	e00c      	b.n	800319c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003182:	f7fe fb47 	bl	8001814 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d905      	bls.n	800319c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e0b3      	b.n	80032fc <HAL_RCC_OscConfig+0x620>
 8003194:	40021000 	.word	0x40021000
 8003198:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800319c:	4b59      	ldr	r3, [pc, #356]	; (8003304 <HAL_RCC_OscConfig+0x628>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1ec      	bne.n	8003182 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031a8:	4b56      	ldr	r3, [pc, #344]	; (8003304 <HAL_RCC_OscConfig+0x628>)
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	4b56      	ldr	r3, [pc, #344]	; (8003308 <HAL_RCC_OscConfig+0x62c>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6a11      	ldr	r1, [r2, #32]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031b8:	3a01      	subs	r2, #1
 80031ba:	0112      	lsls	r2, r2, #4
 80031bc:	4311      	orrs	r1, r2
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80031c2:	0212      	lsls	r2, r2, #8
 80031c4:	4311      	orrs	r1, r2
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80031ca:	0852      	lsrs	r2, r2, #1
 80031cc:	3a01      	subs	r2, #1
 80031ce:	0552      	lsls	r2, r2, #21
 80031d0:	4311      	orrs	r1, r2
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031d6:	0852      	lsrs	r2, r2, #1
 80031d8:	3a01      	subs	r2, #1
 80031da:	0652      	lsls	r2, r2, #25
 80031dc:	4311      	orrs	r1, r2
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80031e2:	06d2      	lsls	r2, r2, #27
 80031e4:	430a      	orrs	r2, r1
 80031e6:	4947      	ldr	r1, [pc, #284]	; (8003304 <HAL_RCC_OscConfig+0x628>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031ec:	4b45      	ldr	r3, [pc, #276]	; (8003304 <HAL_RCC_OscConfig+0x628>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a44      	ldr	r2, [pc, #272]	; (8003304 <HAL_RCC_OscConfig+0x628>)
 80031f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031f6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031f8:	4b42      	ldr	r3, [pc, #264]	; (8003304 <HAL_RCC_OscConfig+0x628>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	4a41      	ldr	r2, [pc, #260]	; (8003304 <HAL_RCC_OscConfig+0x628>)
 80031fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003202:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003204:	f7fe fb06 	bl	8001814 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320c:	f7fe fb02 	bl	8001814 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e06e      	b.n	80032fc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800321e:	4b39      	ldr	r3, [pc, #228]	; (8003304 <HAL_RCC_OscConfig+0x628>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0x530>
 800322a:	e066      	b.n	80032fa <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322c:	4b35      	ldr	r3, [pc, #212]	; (8003304 <HAL_RCC_OscConfig+0x628>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a34      	ldr	r2, [pc, #208]	; (8003304 <HAL_RCC_OscConfig+0x628>)
 8003232:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003236:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003238:	4b32      	ldr	r3, [pc, #200]	; (8003304 <HAL_RCC_OscConfig+0x628>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	4a31      	ldr	r2, [pc, #196]	; (8003304 <HAL_RCC_OscConfig+0x628>)
 800323e:	f023 0303 	bic.w	r3, r3, #3
 8003242:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003244:	4b2f      	ldr	r3, [pc, #188]	; (8003304 <HAL_RCC_OscConfig+0x628>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	4a2e      	ldr	r2, [pc, #184]	; (8003304 <HAL_RCC_OscConfig+0x628>)
 800324a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800324e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003252:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7fe fade 	bl	8001814 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800325c:	f7fe fada 	bl	8001814 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e046      	b.n	80032fc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800326e:	4b25      	ldr	r3, [pc, #148]	; (8003304 <HAL_RCC_OscConfig+0x628>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f0      	bne.n	800325c <HAL_RCC_OscConfig+0x580>
 800327a:	e03e      	b.n	80032fa <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e039      	b.n	80032fc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003288:	4b1e      	ldr	r3, [pc, #120]	; (8003304 <HAL_RCC_OscConfig+0x628>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f003 0203 	and.w	r2, r3, #3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	429a      	cmp	r2, r3
 800329a:	d12c      	bne.n	80032f6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	3b01      	subs	r3, #1
 80032a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d123      	bne.n	80032f6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d11b      	bne.n	80032f6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d113      	bne.n	80032f6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d8:	085b      	lsrs	r3, r3, #1
 80032da:	3b01      	subs	r3, #1
 80032dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032de:	429a      	cmp	r2, r3
 80032e0:	d109      	bne.n	80032f6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ec:	085b      	lsrs	r3, r3, #1
 80032ee:	3b01      	subs	r3, #1
 80032f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d001      	beq.n	80032fa <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3720      	adds	r7, #32
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40021000 	.word	0x40021000
 8003308:	019f800c 	.word	0x019f800c

0800330c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003316:	2300      	movs	r3, #0
 8003318:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e11e      	b.n	8003562 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003324:	4b91      	ldr	r3, [pc, #580]	; (800356c <HAL_RCC_ClockConfig+0x260>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 030f 	and.w	r3, r3, #15
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d910      	bls.n	8003354 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003332:	4b8e      	ldr	r3, [pc, #568]	; (800356c <HAL_RCC_ClockConfig+0x260>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f023 020f 	bic.w	r2, r3, #15
 800333a:	498c      	ldr	r1, [pc, #560]	; (800356c <HAL_RCC_ClockConfig+0x260>)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	4313      	orrs	r3, r2
 8003340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003342:	4b8a      	ldr	r3, [pc, #552]	; (800356c <HAL_RCC_ClockConfig+0x260>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	429a      	cmp	r2, r3
 800334e:	d001      	beq.n	8003354 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e106      	b.n	8003562 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d073      	beq.n	8003448 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b03      	cmp	r3, #3
 8003366:	d129      	bne.n	80033bc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003368:	4b81      	ldr	r3, [pc, #516]	; (8003570 <HAL_RCC_ClockConfig+0x264>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e0f4      	b.n	8003562 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003378:	f000 f99e 	bl	80036b8 <RCC_GetSysClockFreqFromPLLSource>
 800337c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	4a7c      	ldr	r2, [pc, #496]	; (8003574 <HAL_RCC_ClockConfig+0x268>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d93f      	bls.n	8003406 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003386:	4b7a      	ldr	r3, [pc, #488]	; (8003570 <HAL_RCC_ClockConfig+0x264>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d009      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800339a:	2b00      	cmp	r3, #0
 800339c:	d033      	beq.n	8003406 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d12f      	bne.n	8003406 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033a6:	4b72      	ldr	r3, [pc, #456]	; (8003570 <HAL_RCC_ClockConfig+0x264>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033ae:	4a70      	ldr	r2, [pc, #448]	; (8003570 <HAL_RCC_ClockConfig+0x264>)
 80033b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80033b6:	2380      	movs	r3, #128	; 0x80
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	e024      	b.n	8003406 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d107      	bne.n	80033d4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033c4:	4b6a      	ldr	r3, [pc, #424]	; (8003570 <HAL_RCC_ClockConfig+0x264>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d109      	bne.n	80033e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0c6      	b.n	8003562 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033d4:	4b66      	ldr	r3, [pc, #408]	; (8003570 <HAL_RCC_ClockConfig+0x264>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e0be      	b.n	8003562 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80033e4:	f000 f8ce 	bl	8003584 <HAL_RCC_GetSysClockFreq>
 80033e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	4a61      	ldr	r2, [pc, #388]	; (8003574 <HAL_RCC_ClockConfig+0x268>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d909      	bls.n	8003406 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033f2:	4b5f      	ldr	r3, [pc, #380]	; (8003570 <HAL_RCC_ClockConfig+0x264>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033fa:	4a5d      	ldr	r2, [pc, #372]	; (8003570 <HAL_RCC_ClockConfig+0x264>)
 80033fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003400:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003402:	2380      	movs	r3, #128	; 0x80
 8003404:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003406:	4b5a      	ldr	r3, [pc, #360]	; (8003570 <HAL_RCC_ClockConfig+0x264>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f023 0203 	bic.w	r2, r3, #3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	4957      	ldr	r1, [pc, #348]	; (8003570 <HAL_RCC_ClockConfig+0x264>)
 8003414:	4313      	orrs	r3, r2
 8003416:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003418:	f7fe f9fc 	bl	8001814 <HAL_GetTick>
 800341c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341e:	e00a      	b.n	8003436 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003420:	f7fe f9f8 	bl	8001814 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f241 3288 	movw	r2, #5000	; 0x1388
 800342e:	4293      	cmp	r3, r2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e095      	b.n	8003562 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003436:	4b4e      	ldr	r3, [pc, #312]	; (8003570 <HAL_RCC_ClockConfig+0x264>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 020c 	and.w	r2, r3, #12
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	429a      	cmp	r2, r3
 8003446:	d1eb      	bne.n	8003420 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d023      	beq.n	800349c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d005      	beq.n	800346c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003460:	4b43      	ldr	r3, [pc, #268]	; (8003570 <HAL_RCC_ClockConfig+0x264>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	4a42      	ldr	r2, [pc, #264]	; (8003570 <HAL_RCC_ClockConfig+0x264>)
 8003466:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800346a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0308 	and.w	r3, r3, #8
 8003474:	2b00      	cmp	r3, #0
 8003476:	d007      	beq.n	8003488 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003478:	4b3d      	ldr	r3, [pc, #244]	; (8003570 <HAL_RCC_ClockConfig+0x264>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003480:	4a3b      	ldr	r2, [pc, #236]	; (8003570 <HAL_RCC_ClockConfig+0x264>)
 8003482:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003486:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003488:	4b39      	ldr	r3, [pc, #228]	; (8003570 <HAL_RCC_ClockConfig+0x264>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	4936      	ldr	r1, [pc, #216]	; (8003570 <HAL_RCC_ClockConfig+0x264>)
 8003496:	4313      	orrs	r3, r2
 8003498:	608b      	str	r3, [r1, #8]
 800349a:	e008      	b.n	80034ae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	2b80      	cmp	r3, #128	; 0x80
 80034a0:	d105      	bne.n	80034ae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80034a2:	4b33      	ldr	r3, [pc, #204]	; (8003570 <HAL_RCC_ClockConfig+0x264>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	4a32      	ldr	r2, [pc, #200]	; (8003570 <HAL_RCC_ClockConfig+0x264>)
 80034a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034ac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034ae:	4b2f      	ldr	r3, [pc, #188]	; (800356c <HAL_RCC_ClockConfig+0x260>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d21d      	bcs.n	80034f8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034bc:	4b2b      	ldr	r3, [pc, #172]	; (800356c <HAL_RCC_ClockConfig+0x260>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f023 020f 	bic.w	r2, r3, #15
 80034c4:	4929      	ldr	r1, [pc, #164]	; (800356c <HAL_RCC_ClockConfig+0x260>)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034cc:	f7fe f9a2 	bl	8001814 <HAL_GetTick>
 80034d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d2:	e00a      	b.n	80034ea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034d4:	f7fe f99e 	bl	8001814 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e03b      	b.n	8003562 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ea:	4b20      	ldr	r3, [pc, #128]	; (800356c <HAL_RCC_ClockConfig+0x260>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d1ed      	bne.n	80034d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003504:	4b1a      	ldr	r3, [pc, #104]	; (8003570 <HAL_RCC_ClockConfig+0x264>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	4917      	ldr	r1, [pc, #92]	; (8003570 <HAL_RCC_ClockConfig+0x264>)
 8003512:	4313      	orrs	r3, r2
 8003514:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d009      	beq.n	8003536 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003522:	4b13      	ldr	r3, [pc, #76]	; (8003570 <HAL_RCC_ClockConfig+0x264>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	490f      	ldr	r1, [pc, #60]	; (8003570 <HAL_RCC_ClockConfig+0x264>)
 8003532:	4313      	orrs	r3, r2
 8003534:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003536:	f000 f825 	bl	8003584 <HAL_RCC_GetSysClockFreq>
 800353a:	4602      	mov	r2, r0
 800353c:	4b0c      	ldr	r3, [pc, #48]	; (8003570 <HAL_RCC_ClockConfig+0x264>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	091b      	lsrs	r3, r3, #4
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	490c      	ldr	r1, [pc, #48]	; (8003578 <HAL_RCC_ClockConfig+0x26c>)
 8003548:	5ccb      	ldrb	r3, [r1, r3]
 800354a:	f003 031f 	and.w	r3, r3, #31
 800354e:	fa22 f303 	lsr.w	r3, r2, r3
 8003552:	4a0a      	ldr	r2, [pc, #40]	; (800357c <HAL_RCC_ClockConfig+0x270>)
 8003554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003556:	4b0a      	ldr	r3, [pc, #40]	; (8003580 <HAL_RCC_ClockConfig+0x274>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f7fe f90e 	bl	800177c <HAL_InitTick>
 8003560:	4603      	mov	r3, r0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3718      	adds	r7, #24
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40022000 	.word	0x40022000
 8003570:	40021000 	.word	0x40021000
 8003574:	04c4b400 	.word	0x04c4b400
 8003578:	080052f8 	.word	0x080052f8
 800357c:	20000000 	.word	0x20000000
 8003580:	20000004 	.word	0x20000004

08003584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003584:	b480      	push	{r7}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800358a:	4b2c      	ldr	r3, [pc, #176]	; (800363c <HAL_RCC_GetSysClockFreq+0xb8>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 030c 	and.w	r3, r3, #12
 8003592:	2b04      	cmp	r3, #4
 8003594:	d102      	bne.n	800359c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003596:	4b2a      	ldr	r3, [pc, #168]	; (8003640 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003598:	613b      	str	r3, [r7, #16]
 800359a:	e047      	b.n	800362c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800359c:	4b27      	ldr	r3, [pc, #156]	; (800363c <HAL_RCC_GetSysClockFreq+0xb8>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 030c 	and.w	r3, r3, #12
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d102      	bne.n	80035ae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035a8:	4b26      	ldr	r3, [pc, #152]	; (8003644 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	e03e      	b.n	800362c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80035ae:	4b23      	ldr	r3, [pc, #140]	; (800363c <HAL_RCC_GetSysClockFreq+0xb8>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 030c 	and.w	r3, r3, #12
 80035b6:	2b0c      	cmp	r3, #12
 80035b8:	d136      	bne.n	8003628 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035ba:	4b20      	ldr	r3, [pc, #128]	; (800363c <HAL_RCC_GetSysClockFreq+0xb8>)
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035c4:	4b1d      	ldr	r3, [pc, #116]	; (800363c <HAL_RCC_GetSysClockFreq+0xb8>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	091b      	lsrs	r3, r3, #4
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	3301      	adds	r3, #1
 80035d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2b03      	cmp	r3, #3
 80035d6:	d10c      	bne.n	80035f2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035d8:	4a1a      	ldr	r2, [pc, #104]	; (8003644 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e0:	4a16      	ldr	r2, [pc, #88]	; (800363c <HAL_RCC_GetSysClockFreq+0xb8>)
 80035e2:	68d2      	ldr	r2, [r2, #12]
 80035e4:	0a12      	lsrs	r2, r2, #8
 80035e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035ea:	fb02 f303 	mul.w	r3, r2, r3
 80035ee:	617b      	str	r3, [r7, #20]
      break;
 80035f0:	e00c      	b.n	800360c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035f2:	4a13      	ldr	r2, [pc, #76]	; (8003640 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fa:	4a10      	ldr	r2, [pc, #64]	; (800363c <HAL_RCC_GetSysClockFreq+0xb8>)
 80035fc:	68d2      	ldr	r2, [r2, #12]
 80035fe:	0a12      	lsrs	r2, r2, #8
 8003600:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003604:	fb02 f303 	mul.w	r3, r2, r3
 8003608:	617b      	str	r3, [r7, #20]
      break;
 800360a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800360c:	4b0b      	ldr	r3, [pc, #44]	; (800363c <HAL_RCC_GetSysClockFreq+0xb8>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	0e5b      	lsrs	r3, r3, #25
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	3301      	adds	r3, #1
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	fbb2 f3f3 	udiv	r3, r2, r3
 8003624:	613b      	str	r3, [r7, #16]
 8003626:	e001      	b.n	800362c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800362c:	693b      	ldr	r3, [r7, #16]
}
 800362e:	4618      	mov	r0, r3
 8003630:	371c      	adds	r7, #28
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	40021000 	.word	0x40021000
 8003640:	00f42400 	.word	0x00f42400
 8003644:	016e3600 	.word	0x016e3600

08003648 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800364c:	4b03      	ldr	r3, [pc, #12]	; (800365c <HAL_RCC_GetHCLKFreq+0x14>)
 800364e:	681b      	ldr	r3, [r3, #0]
}
 8003650:	4618      	mov	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	20000000 	.word	0x20000000

08003660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003664:	f7ff fff0 	bl	8003648 <HAL_RCC_GetHCLKFreq>
 8003668:	4602      	mov	r2, r0
 800366a:	4b06      	ldr	r3, [pc, #24]	; (8003684 <HAL_RCC_GetPCLK1Freq+0x24>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	0a1b      	lsrs	r3, r3, #8
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	4904      	ldr	r1, [pc, #16]	; (8003688 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003676:	5ccb      	ldrb	r3, [r1, r3]
 8003678:	f003 031f 	and.w	r3, r3, #31
 800367c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003680:	4618      	mov	r0, r3
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40021000 	.word	0x40021000
 8003688:	08005308 	.word	0x08005308

0800368c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003690:	f7ff ffda 	bl	8003648 <HAL_RCC_GetHCLKFreq>
 8003694:	4602      	mov	r2, r0
 8003696:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	0adb      	lsrs	r3, r3, #11
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	4904      	ldr	r1, [pc, #16]	; (80036b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036a2:	5ccb      	ldrb	r3, [r1, r3]
 80036a4:	f003 031f 	and.w	r3, r3, #31
 80036a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40021000 	.word	0x40021000
 80036b4:	08005308 	.word	0x08005308

080036b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036be:	4b1e      	ldr	r3, [pc, #120]	; (8003738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036c8:	4b1b      	ldr	r3, [pc, #108]	; (8003738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	091b      	lsrs	r3, r3, #4
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	3301      	adds	r3, #1
 80036d4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	2b03      	cmp	r3, #3
 80036da:	d10c      	bne.n	80036f6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036dc:	4a17      	ldr	r2, [pc, #92]	; (800373c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e4:	4a14      	ldr	r2, [pc, #80]	; (8003738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036e6:	68d2      	ldr	r2, [r2, #12]
 80036e8:	0a12      	lsrs	r2, r2, #8
 80036ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036ee:	fb02 f303 	mul.w	r3, r2, r3
 80036f2:	617b      	str	r3, [r7, #20]
    break;
 80036f4:	e00c      	b.n	8003710 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036f6:	4a12      	ldr	r2, [pc, #72]	; (8003740 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fe:	4a0e      	ldr	r2, [pc, #56]	; (8003738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003700:	68d2      	ldr	r2, [r2, #12]
 8003702:	0a12      	lsrs	r2, r2, #8
 8003704:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003708:	fb02 f303 	mul.w	r3, r2, r3
 800370c:	617b      	str	r3, [r7, #20]
    break;
 800370e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003710:	4b09      	ldr	r3, [pc, #36]	; (8003738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	0e5b      	lsrs	r3, r3, #25
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	3301      	adds	r3, #1
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	fbb2 f3f3 	udiv	r3, r2, r3
 8003728:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800372a:	687b      	ldr	r3, [r7, #4]
}
 800372c:	4618      	mov	r0, r3
 800372e:	371c      	adds	r7, #28
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	40021000 	.word	0x40021000
 800373c:	016e3600 	.word	0x016e3600
 8003740:	00f42400 	.word	0x00f42400

08003744 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800374c:	2300      	movs	r3, #0
 800374e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003750:	2300      	movs	r3, #0
 8003752:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 8098 	beq.w	8003892 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003762:	2300      	movs	r3, #0
 8003764:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003766:	4b43      	ldr	r3, [pc, #268]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10d      	bne.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003772:	4b40      	ldr	r3, [pc, #256]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003776:	4a3f      	ldr	r2, [pc, #252]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800377c:	6593      	str	r3, [r2, #88]	; 0x58
 800377e:	4b3d      	ldr	r3, [pc, #244]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003786:	60bb      	str	r3, [r7, #8]
 8003788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800378a:	2301      	movs	r3, #1
 800378c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800378e:	4b3a      	ldr	r3, [pc, #232]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a39      	ldr	r2, [pc, #228]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003798:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800379a:	f7fe f83b 	bl	8001814 <HAL_GetTick>
 800379e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037a0:	e009      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a2:	f7fe f837 	bl	8001814 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d902      	bls.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	74fb      	strb	r3, [r7, #19]
        break;
 80037b4:	e005      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037b6:	4b30      	ldr	r3, [pc, #192]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0ef      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80037c2:	7cfb      	ldrb	r3, [r7, #19]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d159      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037c8:	4b2a      	ldr	r3, [pc, #168]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037d2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d01e      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d019      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037e4:	4b23      	ldr	r3, [pc, #140]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037f0:	4b20      	ldr	r3, [pc, #128]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f6:	4a1f      	ldr	r2, [pc, #124]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003800:	4b1c      	ldr	r3, [pc, #112]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003806:	4a1b      	ldr	r2, [pc, #108]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800380c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003810:	4a18      	ldr	r2, [pc, #96]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d016      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003822:	f7fd fff7 	bl	8001814 <HAL_GetTick>
 8003826:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003828:	e00b      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382a:	f7fd fff3 	bl	8001814 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	f241 3288 	movw	r2, #5000	; 0x1388
 8003838:	4293      	cmp	r3, r2
 800383a:	d902      	bls.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	74fb      	strb	r3, [r7, #19]
            break;
 8003840:	e006      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003842:	4b0c      	ldr	r3, [pc, #48]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0ec      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003850:	7cfb      	ldrb	r3, [r7, #19]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10b      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003856:	4b07      	ldr	r3, [pc, #28]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	4903      	ldr	r1, [pc, #12]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800386c:	e008      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800386e:	7cfb      	ldrb	r3, [r7, #19]
 8003870:	74bb      	strb	r3, [r7, #18]
 8003872:	e005      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003874:	40021000 	.word	0x40021000
 8003878:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800387c:	7cfb      	ldrb	r3, [r7, #19]
 800387e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003880:	7c7b      	ldrb	r3, [r7, #17]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d105      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003886:	4ba6      	ldr	r3, [pc, #664]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388a:	4aa5      	ldr	r2, [pc, #660]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800388c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003890:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00a      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800389e:	4ba0      	ldr	r3, [pc, #640]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a4:	f023 0203 	bic.w	r2, r3, #3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	499c      	ldr	r1, [pc, #624]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00a      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038c0:	4b97      	ldr	r3, [pc, #604]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c6:	f023 020c 	bic.w	r2, r3, #12
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	4994      	ldr	r1, [pc, #592]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038e2:	4b8f      	ldr	r3, [pc, #572]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	498b      	ldr	r1, [pc, #556]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00a      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003904:	4b86      	ldr	r3, [pc, #536]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	4983      	ldr	r1, [pc, #524]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003914:	4313      	orrs	r3, r2
 8003916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003926:	4b7e      	ldr	r3, [pc, #504]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	497a      	ldr	r1, [pc, #488]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00a      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003948:	4b75      	ldr	r3, [pc, #468]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800394a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	4972      	ldr	r1, [pc, #456]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003958:	4313      	orrs	r3, r2
 800395a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00a      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800396a:	4b6d      	ldr	r3, [pc, #436]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003970:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	4969      	ldr	r1, [pc, #420]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00a      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800398c:	4b64      	ldr	r3, [pc, #400]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800398e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003992:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	4961      	ldr	r1, [pc, #388]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039ae:	4b5c      	ldr	r3, [pc, #368]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	4958      	ldr	r1, [pc, #352]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d015      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039d0:	4b53      	ldr	r3, [pc, #332]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039de:	4950      	ldr	r1, [pc, #320]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039ee:	d105      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039f0:	4b4b      	ldr	r3, [pc, #300]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	4a4a      	ldr	r2, [pc, #296]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d015      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a08:	4b45      	ldr	r3, [pc, #276]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a16:	4942      	ldr	r1, [pc, #264]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a26:	d105      	bne.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a28:	4b3d      	ldr	r3, [pc, #244]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	4a3c      	ldr	r2, [pc, #240]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a32:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d015      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a40:	4b37      	ldr	r3, [pc, #220]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a46:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	4934      	ldr	r1, [pc, #208]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a5e:	d105      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a60:	4b2f      	ldr	r3, [pc, #188]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	4a2e      	ldr	r2, [pc, #184]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a6a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d015      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a78:	4b29      	ldr	r3, [pc, #164]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a86:	4926      	ldr	r1, [pc, #152]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a96:	d105      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a98:	4b21      	ldr	r3, [pc, #132]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	4a20      	ldr	r2, [pc, #128]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aa2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d015      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ab0:	4b1b      	ldr	r3, [pc, #108]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abe:	4918      	ldr	r1, [pc, #96]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ace:	d105      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ad0:	4b13      	ldr	r3, [pc, #76]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	4a12      	ldr	r2, [pc, #72]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ad6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ada:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d015      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ae8:	4b0d      	ldr	r3, [pc, #52]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af6:	490a      	ldr	r1, [pc, #40]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b06:	d105      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b08:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	4a04      	ldr	r2, [pc, #16]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b12:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003b14:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3718      	adds	r7, #24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40021000 	.word	0x40021000

08003b24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e042      	b.n	8003bbc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d106      	bne.n	8003b4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7fd fcb9 	bl	80014c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2224      	movs	r2, #36	; 0x24
 8003b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0201 	bic.w	r2, r2, #1
 8003b64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f82c 	bl	8003bc4 <UART_SetConfig>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d101      	bne.n	8003b76 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e022      	b.n	8003bbc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 faec 	bl	800415c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ba2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0201 	orr.w	r2, r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 fb73 	bl	80042a0 <UART_CheckIdleState>
 8003bba:	4603      	mov	r3, r0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bc8:	b08c      	sub	sp, #48	; 0x30
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	431a      	orrs	r2, r3
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	4bab      	ldr	r3, [pc, #684]	; (8003ea0 <UART_SetConfig+0x2dc>)
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	6812      	ldr	r2, [r2, #0]
 8003bfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4aa0      	ldr	r2, [pc, #640]	; (8003ea4 <UART_SetConfig+0x2e0>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d004      	beq.n	8003c30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003c3a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	6812      	ldr	r2, [r2, #0]
 8003c42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c44:	430b      	orrs	r3, r1
 8003c46:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4e:	f023 010f 	bic.w	r1, r3, #15
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a91      	ldr	r2, [pc, #580]	; (8003ea8 <UART_SetConfig+0x2e4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d125      	bne.n	8003cb4 <UART_SetConfig+0xf0>
 8003c68:	4b90      	ldr	r3, [pc, #576]	; (8003eac <UART_SetConfig+0x2e8>)
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	2b03      	cmp	r3, #3
 8003c74:	d81a      	bhi.n	8003cac <UART_SetConfig+0xe8>
 8003c76:	a201      	add	r2, pc, #4	; (adr r2, 8003c7c <UART_SetConfig+0xb8>)
 8003c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7c:	08003c8d 	.word	0x08003c8d
 8003c80:	08003c9d 	.word	0x08003c9d
 8003c84:	08003c95 	.word	0x08003c95
 8003c88:	08003ca5 	.word	0x08003ca5
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c92:	e0d6      	b.n	8003e42 <UART_SetConfig+0x27e>
 8003c94:	2302      	movs	r3, #2
 8003c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c9a:	e0d2      	b.n	8003e42 <UART_SetConfig+0x27e>
 8003c9c:	2304      	movs	r3, #4
 8003c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ca2:	e0ce      	b.n	8003e42 <UART_SetConfig+0x27e>
 8003ca4:	2308      	movs	r3, #8
 8003ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003caa:	e0ca      	b.n	8003e42 <UART_SetConfig+0x27e>
 8003cac:	2310      	movs	r3, #16
 8003cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cb2:	e0c6      	b.n	8003e42 <UART_SetConfig+0x27e>
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a7d      	ldr	r2, [pc, #500]	; (8003eb0 <UART_SetConfig+0x2ec>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d138      	bne.n	8003d30 <UART_SetConfig+0x16c>
 8003cbe:	4b7b      	ldr	r3, [pc, #492]	; (8003eac <UART_SetConfig+0x2e8>)
 8003cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc4:	f003 030c 	and.w	r3, r3, #12
 8003cc8:	2b0c      	cmp	r3, #12
 8003cca:	d82d      	bhi.n	8003d28 <UART_SetConfig+0x164>
 8003ccc:	a201      	add	r2, pc, #4	; (adr r2, 8003cd4 <UART_SetConfig+0x110>)
 8003cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd2:	bf00      	nop
 8003cd4:	08003d09 	.word	0x08003d09
 8003cd8:	08003d29 	.word	0x08003d29
 8003cdc:	08003d29 	.word	0x08003d29
 8003ce0:	08003d29 	.word	0x08003d29
 8003ce4:	08003d19 	.word	0x08003d19
 8003ce8:	08003d29 	.word	0x08003d29
 8003cec:	08003d29 	.word	0x08003d29
 8003cf0:	08003d29 	.word	0x08003d29
 8003cf4:	08003d11 	.word	0x08003d11
 8003cf8:	08003d29 	.word	0x08003d29
 8003cfc:	08003d29 	.word	0x08003d29
 8003d00:	08003d29 	.word	0x08003d29
 8003d04:	08003d21 	.word	0x08003d21
 8003d08:	2300      	movs	r3, #0
 8003d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d0e:	e098      	b.n	8003e42 <UART_SetConfig+0x27e>
 8003d10:	2302      	movs	r3, #2
 8003d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d16:	e094      	b.n	8003e42 <UART_SetConfig+0x27e>
 8003d18:	2304      	movs	r3, #4
 8003d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d1e:	e090      	b.n	8003e42 <UART_SetConfig+0x27e>
 8003d20:	2308      	movs	r3, #8
 8003d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d26:	e08c      	b.n	8003e42 <UART_SetConfig+0x27e>
 8003d28:	2310      	movs	r3, #16
 8003d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d2e:	e088      	b.n	8003e42 <UART_SetConfig+0x27e>
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a5f      	ldr	r2, [pc, #380]	; (8003eb4 <UART_SetConfig+0x2f0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d125      	bne.n	8003d86 <UART_SetConfig+0x1c2>
 8003d3a:	4b5c      	ldr	r3, [pc, #368]	; (8003eac <UART_SetConfig+0x2e8>)
 8003d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d40:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d44:	2b30      	cmp	r3, #48	; 0x30
 8003d46:	d016      	beq.n	8003d76 <UART_SetConfig+0x1b2>
 8003d48:	2b30      	cmp	r3, #48	; 0x30
 8003d4a:	d818      	bhi.n	8003d7e <UART_SetConfig+0x1ba>
 8003d4c:	2b20      	cmp	r3, #32
 8003d4e:	d00a      	beq.n	8003d66 <UART_SetConfig+0x1a2>
 8003d50:	2b20      	cmp	r3, #32
 8003d52:	d814      	bhi.n	8003d7e <UART_SetConfig+0x1ba>
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d002      	beq.n	8003d5e <UART_SetConfig+0x19a>
 8003d58:	2b10      	cmp	r3, #16
 8003d5a:	d008      	beq.n	8003d6e <UART_SetConfig+0x1aa>
 8003d5c:	e00f      	b.n	8003d7e <UART_SetConfig+0x1ba>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d64:	e06d      	b.n	8003e42 <UART_SetConfig+0x27e>
 8003d66:	2302      	movs	r3, #2
 8003d68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d6c:	e069      	b.n	8003e42 <UART_SetConfig+0x27e>
 8003d6e:	2304      	movs	r3, #4
 8003d70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d74:	e065      	b.n	8003e42 <UART_SetConfig+0x27e>
 8003d76:	2308      	movs	r3, #8
 8003d78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d7c:	e061      	b.n	8003e42 <UART_SetConfig+0x27e>
 8003d7e:	2310      	movs	r3, #16
 8003d80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d84:	e05d      	b.n	8003e42 <UART_SetConfig+0x27e>
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a4b      	ldr	r2, [pc, #300]	; (8003eb8 <UART_SetConfig+0x2f4>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d125      	bne.n	8003ddc <UART_SetConfig+0x218>
 8003d90:	4b46      	ldr	r3, [pc, #280]	; (8003eac <UART_SetConfig+0x2e8>)
 8003d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d9a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d9c:	d016      	beq.n	8003dcc <UART_SetConfig+0x208>
 8003d9e:	2bc0      	cmp	r3, #192	; 0xc0
 8003da0:	d818      	bhi.n	8003dd4 <UART_SetConfig+0x210>
 8003da2:	2b80      	cmp	r3, #128	; 0x80
 8003da4:	d00a      	beq.n	8003dbc <UART_SetConfig+0x1f8>
 8003da6:	2b80      	cmp	r3, #128	; 0x80
 8003da8:	d814      	bhi.n	8003dd4 <UART_SetConfig+0x210>
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <UART_SetConfig+0x1f0>
 8003dae:	2b40      	cmp	r3, #64	; 0x40
 8003db0:	d008      	beq.n	8003dc4 <UART_SetConfig+0x200>
 8003db2:	e00f      	b.n	8003dd4 <UART_SetConfig+0x210>
 8003db4:	2300      	movs	r3, #0
 8003db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dba:	e042      	b.n	8003e42 <UART_SetConfig+0x27e>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dc2:	e03e      	b.n	8003e42 <UART_SetConfig+0x27e>
 8003dc4:	2304      	movs	r3, #4
 8003dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dca:	e03a      	b.n	8003e42 <UART_SetConfig+0x27e>
 8003dcc:	2308      	movs	r3, #8
 8003dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dd2:	e036      	b.n	8003e42 <UART_SetConfig+0x27e>
 8003dd4:	2310      	movs	r3, #16
 8003dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dda:	e032      	b.n	8003e42 <UART_SetConfig+0x27e>
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a30      	ldr	r2, [pc, #192]	; (8003ea4 <UART_SetConfig+0x2e0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d12a      	bne.n	8003e3c <UART_SetConfig+0x278>
 8003de6:	4b31      	ldr	r3, [pc, #196]	; (8003eac <UART_SetConfig+0x2e8>)
 8003de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003df0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003df4:	d01a      	beq.n	8003e2c <UART_SetConfig+0x268>
 8003df6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dfa:	d81b      	bhi.n	8003e34 <UART_SetConfig+0x270>
 8003dfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e00:	d00c      	beq.n	8003e1c <UART_SetConfig+0x258>
 8003e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e06:	d815      	bhi.n	8003e34 <UART_SetConfig+0x270>
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <UART_SetConfig+0x250>
 8003e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e10:	d008      	beq.n	8003e24 <UART_SetConfig+0x260>
 8003e12:	e00f      	b.n	8003e34 <UART_SetConfig+0x270>
 8003e14:	2300      	movs	r3, #0
 8003e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e1a:	e012      	b.n	8003e42 <UART_SetConfig+0x27e>
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e22:	e00e      	b.n	8003e42 <UART_SetConfig+0x27e>
 8003e24:	2304      	movs	r3, #4
 8003e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e2a:	e00a      	b.n	8003e42 <UART_SetConfig+0x27e>
 8003e2c:	2308      	movs	r3, #8
 8003e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e32:	e006      	b.n	8003e42 <UART_SetConfig+0x27e>
 8003e34:	2310      	movs	r3, #16
 8003e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e3a:	e002      	b.n	8003e42 <UART_SetConfig+0x27e>
 8003e3c:	2310      	movs	r3, #16
 8003e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a17      	ldr	r2, [pc, #92]	; (8003ea4 <UART_SetConfig+0x2e0>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	f040 80a8 	bne.w	8003f9e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e52:	2b08      	cmp	r3, #8
 8003e54:	d834      	bhi.n	8003ec0 <UART_SetConfig+0x2fc>
 8003e56:	a201      	add	r2, pc, #4	; (adr r2, 8003e5c <UART_SetConfig+0x298>)
 8003e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5c:	08003e81 	.word	0x08003e81
 8003e60:	08003ec1 	.word	0x08003ec1
 8003e64:	08003e89 	.word	0x08003e89
 8003e68:	08003ec1 	.word	0x08003ec1
 8003e6c:	08003e8f 	.word	0x08003e8f
 8003e70:	08003ec1 	.word	0x08003ec1
 8003e74:	08003ec1 	.word	0x08003ec1
 8003e78:	08003ec1 	.word	0x08003ec1
 8003e7c:	08003e97 	.word	0x08003e97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e80:	f7ff fbee 	bl	8003660 <HAL_RCC_GetPCLK1Freq>
 8003e84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e86:	e021      	b.n	8003ecc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e88:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <UART_SetConfig+0x2f8>)
 8003e8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e8c:	e01e      	b.n	8003ecc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e8e:	f7ff fb79 	bl	8003584 <HAL_RCC_GetSysClockFreq>
 8003e92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e94:	e01a      	b.n	8003ecc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e9c:	e016      	b.n	8003ecc <UART_SetConfig+0x308>
 8003e9e:	bf00      	nop
 8003ea0:	cfff69f3 	.word	0xcfff69f3
 8003ea4:	40008000 	.word	0x40008000
 8003ea8:	40013800 	.word	0x40013800
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	40004400 	.word	0x40004400
 8003eb4:	40004800 	.word	0x40004800
 8003eb8:	40004c00 	.word	0x40004c00
 8003ebc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003eca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 812a 	beq.w	8004128 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	4a9e      	ldr	r2, [pc, #632]	; (8004154 <UART_SetConfig+0x590>)
 8003eda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	4613      	mov	r3, r2
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	4413      	add	r3, r2
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d305      	bcc.n	8003f04 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d903      	bls.n	8003f0c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f0a:	e10d      	b.n	8004128 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	2200      	movs	r2, #0
 8003f10:	60bb      	str	r3, [r7, #8]
 8003f12:	60fa      	str	r2, [r7, #12]
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	4a8e      	ldr	r2, [pc, #568]	; (8004154 <UART_SetConfig+0x590>)
 8003f1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	2200      	movs	r2, #0
 8003f22:	603b      	str	r3, [r7, #0]
 8003f24:	607a      	str	r2, [r7, #4]
 8003f26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f2e:	f7fc fd91 	bl	8000a54 <__aeabi_uldivmod>
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4610      	mov	r0, r2
 8003f38:	4619      	mov	r1, r3
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	f04f 0300 	mov.w	r3, #0
 8003f42:	020b      	lsls	r3, r1, #8
 8003f44:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003f48:	0202      	lsls	r2, r0, #8
 8003f4a:	6979      	ldr	r1, [r7, #20]
 8003f4c:	6849      	ldr	r1, [r1, #4]
 8003f4e:	0849      	lsrs	r1, r1, #1
 8003f50:	2000      	movs	r0, #0
 8003f52:	460c      	mov	r4, r1
 8003f54:	4605      	mov	r5, r0
 8003f56:	eb12 0804 	adds.w	r8, r2, r4
 8003f5a:	eb43 0905 	adc.w	r9, r3, r5
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	469a      	mov	sl, r3
 8003f66:	4693      	mov	fp, r2
 8003f68:	4652      	mov	r2, sl
 8003f6a:	465b      	mov	r3, fp
 8003f6c:	4640      	mov	r0, r8
 8003f6e:	4649      	mov	r1, r9
 8003f70:	f7fc fd70 	bl	8000a54 <__aeabi_uldivmod>
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	4613      	mov	r3, r2
 8003f7a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f82:	d308      	bcc.n	8003f96 <UART_SetConfig+0x3d2>
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f8a:	d204      	bcs.n	8003f96 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6a3a      	ldr	r2, [r7, #32]
 8003f92:	60da      	str	r2, [r3, #12]
 8003f94:	e0c8      	b.n	8004128 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f9c:	e0c4      	b.n	8004128 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fa6:	d167      	bne.n	8004078 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003fa8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d828      	bhi.n	8004002 <UART_SetConfig+0x43e>
 8003fb0:	a201      	add	r2, pc, #4	; (adr r2, 8003fb8 <UART_SetConfig+0x3f4>)
 8003fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb6:	bf00      	nop
 8003fb8:	08003fdd 	.word	0x08003fdd
 8003fbc:	08003fe5 	.word	0x08003fe5
 8003fc0:	08003fed 	.word	0x08003fed
 8003fc4:	08004003 	.word	0x08004003
 8003fc8:	08003ff3 	.word	0x08003ff3
 8003fcc:	08004003 	.word	0x08004003
 8003fd0:	08004003 	.word	0x08004003
 8003fd4:	08004003 	.word	0x08004003
 8003fd8:	08003ffb 	.word	0x08003ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fdc:	f7ff fb40 	bl	8003660 <HAL_RCC_GetPCLK1Freq>
 8003fe0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fe2:	e014      	b.n	800400e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fe4:	f7ff fb52 	bl	800368c <HAL_RCC_GetPCLK2Freq>
 8003fe8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fea:	e010      	b.n	800400e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fec:	4b5a      	ldr	r3, [pc, #360]	; (8004158 <UART_SetConfig+0x594>)
 8003fee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ff0:	e00d      	b.n	800400e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ff2:	f7ff fac7 	bl	8003584 <HAL_RCC_GetSysClockFreq>
 8003ff6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ff8:	e009      	b.n	800400e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004000:	e005      	b.n	800400e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004002:	2300      	movs	r3, #0
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800400c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 8089 	beq.w	8004128 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	4a4e      	ldr	r2, [pc, #312]	; (8004154 <UART_SetConfig+0x590>)
 800401c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004020:	461a      	mov	r2, r3
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	fbb3 f3f2 	udiv	r3, r3, r2
 8004028:	005a      	lsls	r2, r3, #1
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	085b      	lsrs	r3, r3, #1
 8004030:	441a      	add	r2, r3
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	fbb2 f3f3 	udiv	r3, r2, r3
 800403a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	2b0f      	cmp	r3, #15
 8004040:	d916      	bls.n	8004070 <UART_SetConfig+0x4ac>
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004048:	d212      	bcs.n	8004070 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800404a:	6a3b      	ldr	r3, [r7, #32]
 800404c:	b29b      	uxth	r3, r3
 800404e:	f023 030f 	bic.w	r3, r3, #15
 8004052:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	085b      	lsrs	r3, r3, #1
 8004058:	b29b      	uxth	r3, r3
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	b29a      	uxth	r2, r3
 8004060:	8bfb      	ldrh	r3, [r7, #30]
 8004062:	4313      	orrs	r3, r2
 8004064:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	8bfa      	ldrh	r2, [r7, #30]
 800406c:	60da      	str	r2, [r3, #12]
 800406e:	e05b      	b.n	8004128 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004076:	e057      	b.n	8004128 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004078:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800407c:	2b08      	cmp	r3, #8
 800407e:	d828      	bhi.n	80040d2 <UART_SetConfig+0x50e>
 8004080:	a201      	add	r2, pc, #4	; (adr r2, 8004088 <UART_SetConfig+0x4c4>)
 8004082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004086:	bf00      	nop
 8004088:	080040ad 	.word	0x080040ad
 800408c:	080040b5 	.word	0x080040b5
 8004090:	080040bd 	.word	0x080040bd
 8004094:	080040d3 	.word	0x080040d3
 8004098:	080040c3 	.word	0x080040c3
 800409c:	080040d3 	.word	0x080040d3
 80040a0:	080040d3 	.word	0x080040d3
 80040a4:	080040d3 	.word	0x080040d3
 80040a8:	080040cb 	.word	0x080040cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040ac:	f7ff fad8 	bl	8003660 <HAL_RCC_GetPCLK1Freq>
 80040b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040b2:	e014      	b.n	80040de <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040b4:	f7ff faea 	bl	800368c <HAL_RCC_GetPCLK2Freq>
 80040b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040ba:	e010      	b.n	80040de <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040bc:	4b26      	ldr	r3, [pc, #152]	; (8004158 <UART_SetConfig+0x594>)
 80040be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040c0:	e00d      	b.n	80040de <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040c2:	f7ff fa5f 	bl	8003584 <HAL_RCC_GetSysClockFreq>
 80040c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040c8:	e009      	b.n	80040de <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040d0:	e005      	b.n	80040de <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80040d2:	2300      	movs	r3, #0
 80040d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80040dc:	bf00      	nop
    }

    if (pclk != 0U)
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d021      	beq.n	8004128 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	4a1a      	ldr	r2, [pc, #104]	; (8004154 <UART_SetConfig+0x590>)
 80040ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040ee:	461a      	mov	r2, r3
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	085b      	lsrs	r3, r3, #1
 80040fc:	441a      	add	r2, r3
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	fbb2 f3f3 	udiv	r3, r2, r3
 8004106:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	2b0f      	cmp	r3, #15
 800410c:	d909      	bls.n	8004122 <UART_SetConfig+0x55e>
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004114:	d205      	bcs.n	8004122 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	b29a      	uxth	r2, r3
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	60da      	str	r2, [r3, #12]
 8004120:	e002      	b.n	8004128 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	2201      	movs	r2, #1
 800412c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	2201      	movs	r2, #1
 8004134:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	2200      	movs	r2, #0
 800413c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2200      	movs	r2, #0
 8004142:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004144:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004148:	4618      	mov	r0, r3
 800414a:	3730      	adds	r7, #48	; 0x30
 800414c:	46bd      	mov	sp, r7
 800414e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004152:	bf00      	nop
 8004154:	08005310 	.word	0x08005310
 8004158:	00f42400 	.word	0x00f42400

0800415c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00a      	beq.n	80041ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f0:	f003 0310 	and.w	r3, r3, #16
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004212:	f003 0320 	and.w	r3, r3, #32
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004238:	2b00      	cmp	r3, #0
 800423a:	d01a      	beq.n	8004272 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004256:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800425a:	d10a      	bne.n	8004272 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00a      	beq.n	8004294 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	605a      	str	r2, [r3, #4]
  }
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af02      	add	r7, sp, #8
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042b0:	f7fd fab0 	bl	8001814 <HAL_GetTick>
 80042b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0308 	and.w	r3, r3, #8
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d10e      	bne.n	80042e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f82f 	bl	8004336 <UART_WaitOnFlagUntilTimeout>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e025      	b.n	800432e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d10e      	bne.n	800430e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f819 	bl	8004336 <UART_WaitOnFlagUntilTimeout>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e00f      	b.n	800432e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2220      	movs	r2, #32
 8004312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2220      	movs	r2, #32
 800431a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b09c      	sub	sp, #112	; 0x70
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	603b      	str	r3, [r7, #0]
 8004342:	4613      	mov	r3, r2
 8004344:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004346:	e0a9      	b.n	800449c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004348:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800434a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434e:	f000 80a5 	beq.w	800449c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004352:	f7fd fa5f 	bl	8001814 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800435e:	429a      	cmp	r2, r3
 8004360:	d302      	bcc.n	8004368 <UART_WaitOnFlagUntilTimeout+0x32>
 8004362:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004364:	2b00      	cmp	r3, #0
 8004366:	d140      	bne.n	80043ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004370:	e853 3f00 	ldrex	r3, [r3]
 8004374:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004378:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800437c:	667b      	str	r3, [r7, #100]	; 0x64
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	461a      	mov	r2, r3
 8004384:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004386:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004388:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800438c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800438e:	e841 2300 	strex	r3, r2, [r1]
 8004392:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1e6      	bne.n	8004368 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	3308      	adds	r3, #8
 80043a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043a4:	e853 3f00 	ldrex	r3, [r3]
 80043a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ac:	f023 0301 	bic.w	r3, r3, #1
 80043b0:	663b      	str	r3, [r7, #96]	; 0x60
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	3308      	adds	r3, #8
 80043b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80043bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043c2:	e841 2300 	strex	r3, r2, [r1]
 80043c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80043c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1e5      	bne.n	800439a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2220      	movs	r2, #32
 80043d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2220      	movs	r2, #32
 80043da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e069      	b.n	80044be <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d051      	beq.n	800449c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004402:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004406:	d149      	bne.n	800449c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004410:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441a:	e853 3f00 	ldrex	r3, [r3]
 800441e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004426:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	461a      	mov	r2, r3
 800442e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004430:	637b      	str	r3, [r7, #52]	; 0x34
 8004432:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004434:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004436:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004438:	e841 2300 	strex	r3, r2, [r1]
 800443c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800443e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1e6      	bne.n	8004412 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3308      	adds	r3, #8
 800444a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	e853 3f00 	ldrex	r3, [r3]
 8004452:	613b      	str	r3, [r7, #16]
   return(result);
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	f023 0301 	bic.w	r3, r3, #1
 800445a:	66bb      	str	r3, [r7, #104]	; 0x68
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3308      	adds	r3, #8
 8004462:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004464:	623a      	str	r2, [r7, #32]
 8004466:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004468:	69f9      	ldr	r1, [r7, #28]
 800446a:	6a3a      	ldr	r2, [r7, #32]
 800446c:	e841 2300 	strex	r3, r2, [r1]
 8004470:	61bb      	str	r3, [r7, #24]
   return(result);
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1e5      	bne.n	8004444 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2220      	movs	r2, #32
 800447c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2220      	movs	r2, #32
 8004484:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2220      	movs	r2, #32
 800448c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e010      	b.n	80044be <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	69da      	ldr	r2, [r3, #28]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	4013      	ands	r3, r2
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	bf0c      	ite	eq
 80044ac:	2301      	moveq	r3, #1
 80044ae:	2300      	movne	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	461a      	mov	r2, r3
 80044b4:	79fb      	ldrb	r3, [r7, #7]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	f43f af46 	beq.w	8004348 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3770      	adds	r7, #112	; 0x70
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b085      	sub	sp, #20
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_UARTEx_DisableFifoMode+0x16>
 80044d8:	2302      	movs	r3, #2
 80044da:	e027      	b.n	800452c <HAL_UARTEx_DisableFifoMode+0x66>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2224      	movs	r2, #36	; 0x24
 80044e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0201 	bic.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800450a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2220      	movs	r2, #32
 800451e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004548:	2b01      	cmp	r3, #1
 800454a:	d101      	bne.n	8004550 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800454c:	2302      	movs	r3, #2
 800454e:	e02d      	b.n	80045ac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2224      	movs	r2, #36	; 0x24
 800455c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0201 	bic.w	r2, r2, #1
 8004576:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f84f 	bl	8004630 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2220      	movs	r2, #32
 800459e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d101      	bne.n	80045cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80045c8:	2302      	movs	r3, #2
 80045ca:	e02d      	b.n	8004628 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2224      	movs	r2, #36	; 0x24
 80045d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0201 	bic.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f811 	bl	8004630 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2220      	movs	r2, #32
 800461a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800463c:	2b00      	cmp	r3, #0
 800463e:	d108      	bne.n	8004652 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004650:	e031      	b.n	80046b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004652:	2308      	movs	r3, #8
 8004654:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004656:	2308      	movs	r3, #8
 8004658:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	0e5b      	lsrs	r3, r3, #25
 8004662:	b2db      	uxtb	r3, r3
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	0f5b      	lsrs	r3, r3, #29
 8004672:	b2db      	uxtb	r3, r3
 8004674:	f003 0307 	and.w	r3, r3, #7
 8004678:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800467a:	7bbb      	ldrb	r3, [r7, #14]
 800467c:	7b3a      	ldrb	r2, [r7, #12]
 800467e:	4911      	ldr	r1, [pc, #68]	; (80046c4 <UARTEx_SetNbDataToProcess+0x94>)
 8004680:	5c8a      	ldrb	r2, [r1, r2]
 8004682:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004686:	7b3a      	ldrb	r2, [r7, #12]
 8004688:	490f      	ldr	r1, [pc, #60]	; (80046c8 <UARTEx_SetNbDataToProcess+0x98>)
 800468a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800468c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004690:	b29a      	uxth	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004698:	7bfb      	ldrb	r3, [r7, #15]
 800469a:	7b7a      	ldrb	r2, [r7, #13]
 800469c:	4909      	ldr	r1, [pc, #36]	; (80046c4 <UARTEx_SetNbDataToProcess+0x94>)
 800469e:	5c8a      	ldrb	r2, [r1, r2]
 80046a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80046a4:	7b7a      	ldrb	r2, [r7, #13]
 80046a6:	4908      	ldr	r1, [pc, #32]	; (80046c8 <UARTEx_SetNbDataToProcess+0x98>)
 80046a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80046aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80046b6:	bf00      	nop
 80046b8:	3714      	adds	r7, #20
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	08005328 	.word	0x08005328
 80046c8:	08005330 	.word	0x08005330

080046cc <__errno>:
 80046cc:	4b01      	ldr	r3, [pc, #4]	; (80046d4 <__errno+0x8>)
 80046ce:	6818      	ldr	r0, [r3, #0]
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	2000000c 	.word	0x2000000c

080046d8 <__libc_init_array>:
 80046d8:	b570      	push	{r4, r5, r6, lr}
 80046da:	4d0d      	ldr	r5, [pc, #52]	; (8004710 <__libc_init_array+0x38>)
 80046dc:	4c0d      	ldr	r4, [pc, #52]	; (8004714 <__libc_init_array+0x3c>)
 80046de:	1b64      	subs	r4, r4, r5
 80046e0:	10a4      	asrs	r4, r4, #2
 80046e2:	2600      	movs	r6, #0
 80046e4:	42a6      	cmp	r6, r4
 80046e6:	d109      	bne.n	80046fc <__libc_init_array+0x24>
 80046e8:	4d0b      	ldr	r5, [pc, #44]	; (8004718 <__libc_init_array+0x40>)
 80046ea:	4c0c      	ldr	r4, [pc, #48]	; (800471c <__libc_init_array+0x44>)
 80046ec:	f000 fd1e 	bl	800512c <_init>
 80046f0:	1b64      	subs	r4, r4, r5
 80046f2:	10a4      	asrs	r4, r4, #2
 80046f4:	2600      	movs	r6, #0
 80046f6:	42a6      	cmp	r6, r4
 80046f8:	d105      	bne.n	8004706 <__libc_init_array+0x2e>
 80046fa:	bd70      	pop	{r4, r5, r6, pc}
 80046fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004700:	4798      	blx	r3
 8004702:	3601      	adds	r6, #1
 8004704:	e7ee      	b.n	80046e4 <__libc_init_array+0xc>
 8004706:	f855 3b04 	ldr.w	r3, [r5], #4
 800470a:	4798      	blx	r3
 800470c:	3601      	adds	r6, #1
 800470e:	e7f2      	b.n	80046f6 <__libc_init_array+0x1e>
 8004710:	080053a4 	.word	0x080053a4
 8004714:	080053a4 	.word	0x080053a4
 8004718:	080053a4 	.word	0x080053a4
 800471c:	080053a8 	.word	0x080053a8

08004720 <memset>:
 8004720:	4402      	add	r2, r0
 8004722:	4603      	mov	r3, r0
 8004724:	4293      	cmp	r3, r2
 8004726:	d100      	bne.n	800472a <memset+0xa>
 8004728:	4770      	bx	lr
 800472a:	f803 1b01 	strb.w	r1, [r3], #1
 800472e:	e7f9      	b.n	8004724 <memset+0x4>

08004730 <_puts_r>:
 8004730:	b570      	push	{r4, r5, r6, lr}
 8004732:	460e      	mov	r6, r1
 8004734:	4605      	mov	r5, r0
 8004736:	b118      	cbz	r0, 8004740 <_puts_r+0x10>
 8004738:	6983      	ldr	r3, [r0, #24]
 800473a:	b90b      	cbnz	r3, 8004740 <_puts_r+0x10>
 800473c:	f000 fa48 	bl	8004bd0 <__sinit>
 8004740:	69ab      	ldr	r3, [r5, #24]
 8004742:	68ac      	ldr	r4, [r5, #8]
 8004744:	b913      	cbnz	r3, 800474c <_puts_r+0x1c>
 8004746:	4628      	mov	r0, r5
 8004748:	f000 fa42 	bl	8004bd0 <__sinit>
 800474c:	4b2c      	ldr	r3, [pc, #176]	; (8004800 <_puts_r+0xd0>)
 800474e:	429c      	cmp	r4, r3
 8004750:	d120      	bne.n	8004794 <_puts_r+0x64>
 8004752:	686c      	ldr	r4, [r5, #4]
 8004754:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004756:	07db      	lsls	r3, r3, #31
 8004758:	d405      	bmi.n	8004766 <_puts_r+0x36>
 800475a:	89a3      	ldrh	r3, [r4, #12]
 800475c:	0598      	lsls	r0, r3, #22
 800475e:	d402      	bmi.n	8004766 <_puts_r+0x36>
 8004760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004762:	f000 fad3 	bl	8004d0c <__retarget_lock_acquire_recursive>
 8004766:	89a3      	ldrh	r3, [r4, #12]
 8004768:	0719      	lsls	r1, r3, #28
 800476a:	d51d      	bpl.n	80047a8 <_puts_r+0x78>
 800476c:	6923      	ldr	r3, [r4, #16]
 800476e:	b1db      	cbz	r3, 80047a8 <_puts_r+0x78>
 8004770:	3e01      	subs	r6, #1
 8004772:	68a3      	ldr	r3, [r4, #8]
 8004774:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004778:	3b01      	subs	r3, #1
 800477a:	60a3      	str	r3, [r4, #8]
 800477c:	bb39      	cbnz	r1, 80047ce <_puts_r+0x9e>
 800477e:	2b00      	cmp	r3, #0
 8004780:	da38      	bge.n	80047f4 <_puts_r+0xc4>
 8004782:	4622      	mov	r2, r4
 8004784:	210a      	movs	r1, #10
 8004786:	4628      	mov	r0, r5
 8004788:	f000 f848 	bl	800481c <__swbuf_r>
 800478c:	3001      	adds	r0, #1
 800478e:	d011      	beq.n	80047b4 <_puts_r+0x84>
 8004790:	250a      	movs	r5, #10
 8004792:	e011      	b.n	80047b8 <_puts_r+0x88>
 8004794:	4b1b      	ldr	r3, [pc, #108]	; (8004804 <_puts_r+0xd4>)
 8004796:	429c      	cmp	r4, r3
 8004798:	d101      	bne.n	800479e <_puts_r+0x6e>
 800479a:	68ac      	ldr	r4, [r5, #8]
 800479c:	e7da      	b.n	8004754 <_puts_r+0x24>
 800479e:	4b1a      	ldr	r3, [pc, #104]	; (8004808 <_puts_r+0xd8>)
 80047a0:	429c      	cmp	r4, r3
 80047a2:	bf08      	it	eq
 80047a4:	68ec      	ldreq	r4, [r5, #12]
 80047a6:	e7d5      	b.n	8004754 <_puts_r+0x24>
 80047a8:	4621      	mov	r1, r4
 80047aa:	4628      	mov	r0, r5
 80047ac:	f000 f888 	bl	80048c0 <__swsetup_r>
 80047b0:	2800      	cmp	r0, #0
 80047b2:	d0dd      	beq.n	8004770 <_puts_r+0x40>
 80047b4:	f04f 35ff 	mov.w	r5, #4294967295
 80047b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047ba:	07da      	lsls	r2, r3, #31
 80047bc:	d405      	bmi.n	80047ca <_puts_r+0x9a>
 80047be:	89a3      	ldrh	r3, [r4, #12]
 80047c0:	059b      	lsls	r3, r3, #22
 80047c2:	d402      	bmi.n	80047ca <_puts_r+0x9a>
 80047c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047c6:	f000 faa2 	bl	8004d0e <__retarget_lock_release_recursive>
 80047ca:	4628      	mov	r0, r5
 80047cc:	bd70      	pop	{r4, r5, r6, pc}
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	da04      	bge.n	80047dc <_puts_r+0xac>
 80047d2:	69a2      	ldr	r2, [r4, #24]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	dc06      	bgt.n	80047e6 <_puts_r+0xb6>
 80047d8:	290a      	cmp	r1, #10
 80047da:	d004      	beq.n	80047e6 <_puts_r+0xb6>
 80047dc:	6823      	ldr	r3, [r4, #0]
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	6022      	str	r2, [r4, #0]
 80047e2:	7019      	strb	r1, [r3, #0]
 80047e4:	e7c5      	b.n	8004772 <_puts_r+0x42>
 80047e6:	4622      	mov	r2, r4
 80047e8:	4628      	mov	r0, r5
 80047ea:	f000 f817 	bl	800481c <__swbuf_r>
 80047ee:	3001      	adds	r0, #1
 80047f0:	d1bf      	bne.n	8004772 <_puts_r+0x42>
 80047f2:	e7df      	b.n	80047b4 <_puts_r+0x84>
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	250a      	movs	r5, #10
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	6022      	str	r2, [r4, #0]
 80047fc:	701d      	strb	r5, [r3, #0]
 80047fe:	e7db      	b.n	80047b8 <_puts_r+0x88>
 8004800:	0800535c 	.word	0x0800535c
 8004804:	0800537c 	.word	0x0800537c
 8004808:	0800533c 	.word	0x0800533c

0800480c <puts>:
 800480c:	4b02      	ldr	r3, [pc, #8]	; (8004818 <puts+0xc>)
 800480e:	4601      	mov	r1, r0
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	f7ff bf8d 	b.w	8004730 <_puts_r>
 8004816:	bf00      	nop
 8004818:	2000000c 	.word	0x2000000c

0800481c <__swbuf_r>:
 800481c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481e:	460e      	mov	r6, r1
 8004820:	4614      	mov	r4, r2
 8004822:	4605      	mov	r5, r0
 8004824:	b118      	cbz	r0, 800482e <__swbuf_r+0x12>
 8004826:	6983      	ldr	r3, [r0, #24]
 8004828:	b90b      	cbnz	r3, 800482e <__swbuf_r+0x12>
 800482a:	f000 f9d1 	bl	8004bd0 <__sinit>
 800482e:	4b21      	ldr	r3, [pc, #132]	; (80048b4 <__swbuf_r+0x98>)
 8004830:	429c      	cmp	r4, r3
 8004832:	d12b      	bne.n	800488c <__swbuf_r+0x70>
 8004834:	686c      	ldr	r4, [r5, #4]
 8004836:	69a3      	ldr	r3, [r4, #24]
 8004838:	60a3      	str	r3, [r4, #8]
 800483a:	89a3      	ldrh	r3, [r4, #12]
 800483c:	071a      	lsls	r2, r3, #28
 800483e:	d52f      	bpl.n	80048a0 <__swbuf_r+0x84>
 8004840:	6923      	ldr	r3, [r4, #16]
 8004842:	b36b      	cbz	r3, 80048a0 <__swbuf_r+0x84>
 8004844:	6923      	ldr	r3, [r4, #16]
 8004846:	6820      	ldr	r0, [r4, #0]
 8004848:	1ac0      	subs	r0, r0, r3
 800484a:	6963      	ldr	r3, [r4, #20]
 800484c:	b2f6      	uxtb	r6, r6
 800484e:	4283      	cmp	r3, r0
 8004850:	4637      	mov	r7, r6
 8004852:	dc04      	bgt.n	800485e <__swbuf_r+0x42>
 8004854:	4621      	mov	r1, r4
 8004856:	4628      	mov	r0, r5
 8004858:	f000 f926 	bl	8004aa8 <_fflush_r>
 800485c:	bb30      	cbnz	r0, 80048ac <__swbuf_r+0x90>
 800485e:	68a3      	ldr	r3, [r4, #8]
 8004860:	3b01      	subs	r3, #1
 8004862:	60a3      	str	r3, [r4, #8]
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	6022      	str	r2, [r4, #0]
 800486a:	701e      	strb	r6, [r3, #0]
 800486c:	6963      	ldr	r3, [r4, #20]
 800486e:	3001      	adds	r0, #1
 8004870:	4283      	cmp	r3, r0
 8004872:	d004      	beq.n	800487e <__swbuf_r+0x62>
 8004874:	89a3      	ldrh	r3, [r4, #12]
 8004876:	07db      	lsls	r3, r3, #31
 8004878:	d506      	bpl.n	8004888 <__swbuf_r+0x6c>
 800487a:	2e0a      	cmp	r6, #10
 800487c:	d104      	bne.n	8004888 <__swbuf_r+0x6c>
 800487e:	4621      	mov	r1, r4
 8004880:	4628      	mov	r0, r5
 8004882:	f000 f911 	bl	8004aa8 <_fflush_r>
 8004886:	b988      	cbnz	r0, 80048ac <__swbuf_r+0x90>
 8004888:	4638      	mov	r0, r7
 800488a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800488c:	4b0a      	ldr	r3, [pc, #40]	; (80048b8 <__swbuf_r+0x9c>)
 800488e:	429c      	cmp	r4, r3
 8004890:	d101      	bne.n	8004896 <__swbuf_r+0x7a>
 8004892:	68ac      	ldr	r4, [r5, #8]
 8004894:	e7cf      	b.n	8004836 <__swbuf_r+0x1a>
 8004896:	4b09      	ldr	r3, [pc, #36]	; (80048bc <__swbuf_r+0xa0>)
 8004898:	429c      	cmp	r4, r3
 800489a:	bf08      	it	eq
 800489c:	68ec      	ldreq	r4, [r5, #12]
 800489e:	e7ca      	b.n	8004836 <__swbuf_r+0x1a>
 80048a0:	4621      	mov	r1, r4
 80048a2:	4628      	mov	r0, r5
 80048a4:	f000 f80c 	bl	80048c0 <__swsetup_r>
 80048a8:	2800      	cmp	r0, #0
 80048aa:	d0cb      	beq.n	8004844 <__swbuf_r+0x28>
 80048ac:	f04f 37ff 	mov.w	r7, #4294967295
 80048b0:	e7ea      	b.n	8004888 <__swbuf_r+0x6c>
 80048b2:	bf00      	nop
 80048b4:	0800535c 	.word	0x0800535c
 80048b8:	0800537c 	.word	0x0800537c
 80048bc:	0800533c 	.word	0x0800533c

080048c0 <__swsetup_r>:
 80048c0:	4b32      	ldr	r3, [pc, #200]	; (800498c <__swsetup_r+0xcc>)
 80048c2:	b570      	push	{r4, r5, r6, lr}
 80048c4:	681d      	ldr	r5, [r3, #0]
 80048c6:	4606      	mov	r6, r0
 80048c8:	460c      	mov	r4, r1
 80048ca:	b125      	cbz	r5, 80048d6 <__swsetup_r+0x16>
 80048cc:	69ab      	ldr	r3, [r5, #24]
 80048ce:	b913      	cbnz	r3, 80048d6 <__swsetup_r+0x16>
 80048d0:	4628      	mov	r0, r5
 80048d2:	f000 f97d 	bl	8004bd0 <__sinit>
 80048d6:	4b2e      	ldr	r3, [pc, #184]	; (8004990 <__swsetup_r+0xd0>)
 80048d8:	429c      	cmp	r4, r3
 80048da:	d10f      	bne.n	80048fc <__swsetup_r+0x3c>
 80048dc:	686c      	ldr	r4, [r5, #4]
 80048de:	89a3      	ldrh	r3, [r4, #12]
 80048e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048e4:	0719      	lsls	r1, r3, #28
 80048e6:	d42c      	bmi.n	8004942 <__swsetup_r+0x82>
 80048e8:	06dd      	lsls	r5, r3, #27
 80048ea:	d411      	bmi.n	8004910 <__swsetup_r+0x50>
 80048ec:	2309      	movs	r3, #9
 80048ee:	6033      	str	r3, [r6, #0]
 80048f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80048f4:	81a3      	strh	r3, [r4, #12]
 80048f6:	f04f 30ff 	mov.w	r0, #4294967295
 80048fa:	e03e      	b.n	800497a <__swsetup_r+0xba>
 80048fc:	4b25      	ldr	r3, [pc, #148]	; (8004994 <__swsetup_r+0xd4>)
 80048fe:	429c      	cmp	r4, r3
 8004900:	d101      	bne.n	8004906 <__swsetup_r+0x46>
 8004902:	68ac      	ldr	r4, [r5, #8]
 8004904:	e7eb      	b.n	80048de <__swsetup_r+0x1e>
 8004906:	4b24      	ldr	r3, [pc, #144]	; (8004998 <__swsetup_r+0xd8>)
 8004908:	429c      	cmp	r4, r3
 800490a:	bf08      	it	eq
 800490c:	68ec      	ldreq	r4, [r5, #12]
 800490e:	e7e6      	b.n	80048de <__swsetup_r+0x1e>
 8004910:	0758      	lsls	r0, r3, #29
 8004912:	d512      	bpl.n	800493a <__swsetup_r+0x7a>
 8004914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004916:	b141      	cbz	r1, 800492a <__swsetup_r+0x6a>
 8004918:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800491c:	4299      	cmp	r1, r3
 800491e:	d002      	beq.n	8004926 <__swsetup_r+0x66>
 8004920:	4630      	mov	r0, r6
 8004922:	f000 fa5b 	bl	8004ddc <_free_r>
 8004926:	2300      	movs	r3, #0
 8004928:	6363      	str	r3, [r4, #52]	; 0x34
 800492a:	89a3      	ldrh	r3, [r4, #12]
 800492c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004930:	81a3      	strh	r3, [r4, #12]
 8004932:	2300      	movs	r3, #0
 8004934:	6063      	str	r3, [r4, #4]
 8004936:	6923      	ldr	r3, [r4, #16]
 8004938:	6023      	str	r3, [r4, #0]
 800493a:	89a3      	ldrh	r3, [r4, #12]
 800493c:	f043 0308 	orr.w	r3, r3, #8
 8004940:	81a3      	strh	r3, [r4, #12]
 8004942:	6923      	ldr	r3, [r4, #16]
 8004944:	b94b      	cbnz	r3, 800495a <__swsetup_r+0x9a>
 8004946:	89a3      	ldrh	r3, [r4, #12]
 8004948:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800494c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004950:	d003      	beq.n	800495a <__swsetup_r+0x9a>
 8004952:	4621      	mov	r1, r4
 8004954:	4630      	mov	r0, r6
 8004956:	f000 fa01 	bl	8004d5c <__smakebuf_r>
 800495a:	89a0      	ldrh	r0, [r4, #12]
 800495c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004960:	f010 0301 	ands.w	r3, r0, #1
 8004964:	d00a      	beq.n	800497c <__swsetup_r+0xbc>
 8004966:	2300      	movs	r3, #0
 8004968:	60a3      	str	r3, [r4, #8]
 800496a:	6963      	ldr	r3, [r4, #20]
 800496c:	425b      	negs	r3, r3
 800496e:	61a3      	str	r3, [r4, #24]
 8004970:	6923      	ldr	r3, [r4, #16]
 8004972:	b943      	cbnz	r3, 8004986 <__swsetup_r+0xc6>
 8004974:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004978:	d1ba      	bne.n	80048f0 <__swsetup_r+0x30>
 800497a:	bd70      	pop	{r4, r5, r6, pc}
 800497c:	0781      	lsls	r1, r0, #30
 800497e:	bf58      	it	pl
 8004980:	6963      	ldrpl	r3, [r4, #20]
 8004982:	60a3      	str	r3, [r4, #8]
 8004984:	e7f4      	b.n	8004970 <__swsetup_r+0xb0>
 8004986:	2000      	movs	r0, #0
 8004988:	e7f7      	b.n	800497a <__swsetup_r+0xba>
 800498a:	bf00      	nop
 800498c:	2000000c 	.word	0x2000000c
 8004990:	0800535c 	.word	0x0800535c
 8004994:	0800537c 	.word	0x0800537c
 8004998:	0800533c 	.word	0x0800533c

0800499c <__sflush_r>:
 800499c:	898a      	ldrh	r2, [r1, #12]
 800499e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049a2:	4605      	mov	r5, r0
 80049a4:	0710      	lsls	r0, r2, #28
 80049a6:	460c      	mov	r4, r1
 80049a8:	d458      	bmi.n	8004a5c <__sflush_r+0xc0>
 80049aa:	684b      	ldr	r3, [r1, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	dc05      	bgt.n	80049bc <__sflush_r+0x20>
 80049b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	dc02      	bgt.n	80049bc <__sflush_r+0x20>
 80049b6:	2000      	movs	r0, #0
 80049b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049be:	2e00      	cmp	r6, #0
 80049c0:	d0f9      	beq.n	80049b6 <__sflush_r+0x1a>
 80049c2:	2300      	movs	r3, #0
 80049c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80049c8:	682f      	ldr	r7, [r5, #0]
 80049ca:	602b      	str	r3, [r5, #0]
 80049cc:	d032      	beq.n	8004a34 <__sflush_r+0x98>
 80049ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80049d0:	89a3      	ldrh	r3, [r4, #12]
 80049d2:	075a      	lsls	r2, r3, #29
 80049d4:	d505      	bpl.n	80049e2 <__sflush_r+0x46>
 80049d6:	6863      	ldr	r3, [r4, #4]
 80049d8:	1ac0      	subs	r0, r0, r3
 80049da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049dc:	b10b      	cbz	r3, 80049e2 <__sflush_r+0x46>
 80049de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049e0:	1ac0      	subs	r0, r0, r3
 80049e2:	2300      	movs	r3, #0
 80049e4:	4602      	mov	r2, r0
 80049e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049e8:	6a21      	ldr	r1, [r4, #32]
 80049ea:	4628      	mov	r0, r5
 80049ec:	47b0      	blx	r6
 80049ee:	1c43      	adds	r3, r0, #1
 80049f0:	89a3      	ldrh	r3, [r4, #12]
 80049f2:	d106      	bne.n	8004a02 <__sflush_r+0x66>
 80049f4:	6829      	ldr	r1, [r5, #0]
 80049f6:	291d      	cmp	r1, #29
 80049f8:	d82c      	bhi.n	8004a54 <__sflush_r+0xb8>
 80049fa:	4a2a      	ldr	r2, [pc, #168]	; (8004aa4 <__sflush_r+0x108>)
 80049fc:	40ca      	lsrs	r2, r1
 80049fe:	07d6      	lsls	r6, r2, #31
 8004a00:	d528      	bpl.n	8004a54 <__sflush_r+0xb8>
 8004a02:	2200      	movs	r2, #0
 8004a04:	6062      	str	r2, [r4, #4]
 8004a06:	04d9      	lsls	r1, r3, #19
 8004a08:	6922      	ldr	r2, [r4, #16]
 8004a0a:	6022      	str	r2, [r4, #0]
 8004a0c:	d504      	bpl.n	8004a18 <__sflush_r+0x7c>
 8004a0e:	1c42      	adds	r2, r0, #1
 8004a10:	d101      	bne.n	8004a16 <__sflush_r+0x7a>
 8004a12:	682b      	ldr	r3, [r5, #0]
 8004a14:	b903      	cbnz	r3, 8004a18 <__sflush_r+0x7c>
 8004a16:	6560      	str	r0, [r4, #84]	; 0x54
 8004a18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a1a:	602f      	str	r7, [r5, #0]
 8004a1c:	2900      	cmp	r1, #0
 8004a1e:	d0ca      	beq.n	80049b6 <__sflush_r+0x1a>
 8004a20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a24:	4299      	cmp	r1, r3
 8004a26:	d002      	beq.n	8004a2e <__sflush_r+0x92>
 8004a28:	4628      	mov	r0, r5
 8004a2a:	f000 f9d7 	bl	8004ddc <_free_r>
 8004a2e:	2000      	movs	r0, #0
 8004a30:	6360      	str	r0, [r4, #52]	; 0x34
 8004a32:	e7c1      	b.n	80049b8 <__sflush_r+0x1c>
 8004a34:	6a21      	ldr	r1, [r4, #32]
 8004a36:	2301      	movs	r3, #1
 8004a38:	4628      	mov	r0, r5
 8004a3a:	47b0      	blx	r6
 8004a3c:	1c41      	adds	r1, r0, #1
 8004a3e:	d1c7      	bne.n	80049d0 <__sflush_r+0x34>
 8004a40:	682b      	ldr	r3, [r5, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d0c4      	beq.n	80049d0 <__sflush_r+0x34>
 8004a46:	2b1d      	cmp	r3, #29
 8004a48:	d001      	beq.n	8004a4e <__sflush_r+0xb2>
 8004a4a:	2b16      	cmp	r3, #22
 8004a4c:	d101      	bne.n	8004a52 <__sflush_r+0xb6>
 8004a4e:	602f      	str	r7, [r5, #0]
 8004a50:	e7b1      	b.n	80049b6 <__sflush_r+0x1a>
 8004a52:	89a3      	ldrh	r3, [r4, #12]
 8004a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a58:	81a3      	strh	r3, [r4, #12]
 8004a5a:	e7ad      	b.n	80049b8 <__sflush_r+0x1c>
 8004a5c:	690f      	ldr	r7, [r1, #16]
 8004a5e:	2f00      	cmp	r7, #0
 8004a60:	d0a9      	beq.n	80049b6 <__sflush_r+0x1a>
 8004a62:	0793      	lsls	r3, r2, #30
 8004a64:	680e      	ldr	r6, [r1, #0]
 8004a66:	bf08      	it	eq
 8004a68:	694b      	ldreq	r3, [r1, #20]
 8004a6a:	600f      	str	r7, [r1, #0]
 8004a6c:	bf18      	it	ne
 8004a6e:	2300      	movne	r3, #0
 8004a70:	eba6 0807 	sub.w	r8, r6, r7
 8004a74:	608b      	str	r3, [r1, #8]
 8004a76:	f1b8 0f00 	cmp.w	r8, #0
 8004a7a:	dd9c      	ble.n	80049b6 <__sflush_r+0x1a>
 8004a7c:	6a21      	ldr	r1, [r4, #32]
 8004a7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a80:	4643      	mov	r3, r8
 8004a82:	463a      	mov	r2, r7
 8004a84:	4628      	mov	r0, r5
 8004a86:	47b0      	blx	r6
 8004a88:	2800      	cmp	r0, #0
 8004a8a:	dc06      	bgt.n	8004a9a <__sflush_r+0xfe>
 8004a8c:	89a3      	ldrh	r3, [r4, #12]
 8004a8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a92:	81a3      	strh	r3, [r4, #12]
 8004a94:	f04f 30ff 	mov.w	r0, #4294967295
 8004a98:	e78e      	b.n	80049b8 <__sflush_r+0x1c>
 8004a9a:	4407      	add	r7, r0
 8004a9c:	eba8 0800 	sub.w	r8, r8, r0
 8004aa0:	e7e9      	b.n	8004a76 <__sflush_r+0xda>
 8004aa2:	bf00      	nop
 8004aa4:	20400001 	.word	0x20400001

08004aa8 <_fflush_r>:
 8004aa8:	b538      	push	{r3, r4, r5, lr}
 8004aaa:	690b      	ldr	r3, [r1, #16]
 8004aac:	4605      	mov	r5, r0
 8004aae:	460c      	mov	r4, r1
 8004ab0:	b913      	cbnz	r3, 8004ab8 <_fflush_r+0x10>
 8004ab2:	2500      	movs	r5, #0
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	bd38      	pop	{r3, r4, r5, pc}
 8004ab8:	b118      	cbz	r0, 8004ac2 <_fflush_r+0x1a>
 8004aba:	6983      	ldr	r3, [r0, #24]
 8004abc:	b90b      	cbnz	r3, 8004ac2 <_fflush_r+0x1a>
 8004abe:	f000 f887 	bl	8004bd0 <__sinit>
 8004ac2:	4b14      	ldr	r3, [pc, #80]	; (8004b14 <_fflush_r+0x6c>)
 8004ac4:	429c      	cmp	r4, r3
 8004ac6:	d11b      	bne.n	8004b00 <_fflush_r+0x58>
 8004ac8:	686c      	ldr	r4, [r5, #4]
 8004aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0ef      	beq.n	8004ab2 <_fflush_r+0xa>
 8004ad2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ad4:	07d0      	lsls	r0, r2, #31
 8004ad6:	d404      	bmi.n	8004ae2 <_fflush_r+0x3a>
 8004ad8:	0599      	lsls	r1, r3, #22
 8004ada:	d402      	bmi.n	8004ae2 <_fflush_r+0x3a>
 8004adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ade:	f000 f915 	bl	8004d0c <__retarget_lock_acquire_recursive>
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	4621      	mov	r1, r4
 8004ae6:	f7ff ff59 	bl	800499c <__sflush_r>
 8004aea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004aec:	07da      	lsls	r2, r3, #31
 8004aee:	4605      	mov	r5, r0
 8004af0:	d4e0      	bmi.n	8004ab4 <_fflush_r+0xc>
 8004af2:	89a3      	ldrh	r3, [r4, #12]
 8004af4:	059b      	lsls	r3, r3, #22
 8004af6:	d4dd      	bmi.n	8004ab4 <_fflush_r+0xc>
 8004af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004afa:	f000 f908 	bl	8004d0e <__retarget_lock_release_recursive>
 8004afe:	e7d9      	b.n	8004ab4 <_fflush_r+0xc>
 8004b00:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <_fflush_r+0x70>)
 8004b02:	429c      	cmp	r4, r3
 8004b04:	d101      	bne.n	8004b0a <_fflush_r+0x62>
 8004b06:	68ac      	ldr	r4, [r5, #8]
 8004b08:	e7df      	b.n	8004aca <_fflush_r+0x22>
 8004b0a:	4b04      	ldr	r3, [pc, #16]	; (8004b1c <_fflush_r+0x74>)
 8004b0c:	429c      	cmp	r4, r3
 8004b0e:	bf08      	it	eq
 8004b10:	68ec      	ldreq	r4, [r5, #12]
 8004b12:	e7da      	b.n	8004aca <_fflush_r+0x22>
 8004b14:	0800535c 	.word	0x0800535c
 8004b18:	0800537c 	.word	0x0800537c
 8004b1c:	0800533c 	.word	0x0800533c

08004b20 <std>:
 8004b20:	2300      	movs	r3, #0
 8004b22:	b510      	push	{r4, lr}
 8004b24:	4604      	mov	r4, r0
 8004b26:	e9c0 3300 	strd	r3, r3, [r0]
 8004b2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b2e:	6083      	str	r3, [r0, #8]
 8004b30:	8181      	strh	r1, [r0, #12]
 8004b32:	6643      	str	r3, [r0, #100]	; 0x64
 8004b34:	81c2      	strh	r2, [r0, #14]
 8004b36:	6183      	str	r3, [r0, #24]
 8004b38:	4619      	mov	r1, r3
 8004b3a:	2208      	movs	r2, #8
 8004b3c:	305c      	adds	r0, #92	; 0x5c
 8004b3e:	f7ff fdef 	bl	8004720 <memset>
 8004b42:	4b05      	ldr	r3, [pc, #20]	; (8004b58 <std+0x38>)
 8004b44:	6263      	str	r3, [r4, #36]	; 0x24
 8004b46:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <std+0x3c>)
 8004b48:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b4a:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <std+0x40>)
 8004b4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b4e:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <std+0x44>)
 8004b50:	6224      	str	r4, [r4, #32]
 8004b52:	6323      	str	r3, [r4, #48]	; 0x30
 8004b54:	bd10      	pop	{r4, pc}
 8004b56:	bf00      	nop
 8004b58:	08004fbd 	.word	0x08004fbd
 8004b5c:	08004fdf 	.word	0x08004fdf
 8004b60:	08005017 	.word	0x08005017
 8004b64:	0800503b 	.word	0x0800503b

08004b68 <_cleanup_r>:
 8004b68:	4901      	ldr	r1, [pc, #4]	; (8004b70 <_cleanup_r+0x8>)
 8004b6a:	f000 b8af 	b.w	8004ccc <_fwalk_reent>
 8004b6e:	bf00      	nop
 8004b70:	08004aa9 	.word	0x08004aa9

08004b74 <__sfmoreglue>:
 8004b74:	b570      	push	{r4, r5, r6, lr}
 8004b76:	2268      	movs	r2, #104	; 0x68
 8004b78:	1e4d      	subs	r5, r1, #1
 8004b7a:	4355      	muls	r5, r2
 8004b7c:	460e      	mov	r6, r1
 8004b7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004b82:	f000 f997 	bl	8004eb4 <_malloc_r>
 8004b86:	4604      	mov	r4, r0
 8004b88:	b140      	cbz	r0, 8004b9c <__sfmoreglue+0x28>
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	e9c0 1600 	strd	r1, r6, [r0]
 8004b90:	300c      	adds	r0, #12
 8004b92:	60a0      	str	r0, [r4, #8]
 8004b94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b98:	f7ff fdc2 	bl	8004720 <memset>
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	bd70      	pop	{r4, r5, r6, pc}

08004ba0 <__sfp_lock_acquire>:
 8004ba0:	4801      	ldr	r0, [pc, #4]	; (8004ba8 <__sfp_lock_acquire+0x8>)
 8004ba2:	f000 b8b3 	b.w	8004d0c <__retarget_lock_acquire_recursive>
 8004ba6:	bf00      	nop
 8004ba8:	2000018d 	.word	0x2000018d

08004bac <__sfp_lock_release>:
 8004bac:	4801      	ldr	r0, [pc, #4]	; (8004bb4 <__sfp_lock_release+0x8>)
 8004bae:	f000 b8ae 	b.w	8004d0e <__retarget_lock_release_recursive>
 8004bb2:	bf00      	nop
 8004bb4:	2000018d 	.word	0x2000018d

08004bb8 <__sinit_lock_acquire>:
 8004bb8:	4801      	ldr	r0, [pc, #4]	; (8004bc0 <__sinit_lock_acquire+0x8>)
 8004bba:	f000 b8a7 	b.w	8004d0c <__retarget_lock_acquire_recursive>
 8004bbe:	bf00      	nop
 8004bc0:	2000018e 	.word	0x2000018e

08004bc4 <__sinit_lock_release>:
 8004bc4:	4801      	ldr	r0, [pc, #4]	; (8004bcc <__sinit_lock_release+0x8>)
 8004bc6:	f000 b8a2 	b.w	8004d0e <__retarget_lock_release_recursive>
 8004bca:	bf00      	nop
 8004bcc:	2000018e 	.word	0x2000018e

08004bd0 <__sinit>:
 8004bd0:	b510      	push	{r4, lr}
 8004bd2:	4604      	mov	r4, r0
 8004bd4:	f7ff fff0 	bl	8004bb8 <__sinit_lock_acquire>
 8004bd8:	69a3      	ldr	r3, [r4, #24]
 8004bda:	b11b      	cbz	r3, 8004be4 <__sinit+0x14>
 8004bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004be0:	f7ff bff0 	b.w	8004bc4 <__sinit_lock_release>
 8004be4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004be8:	6523      	str	r3, [r4, #80]	; 0x50
 8004bea:	4b13      	ldr	r3, [pc, #76]	; (8004c38 <__sinit+0x68>)
 8004bec:	4a13      	ldr	r2, [pc, #76]	; (8004c3c <__sinit+0x6c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	62a2      	str	r2, [r4, #40]	; 0x28
 8004bf2:	42a3      	cmp	r3, r4
 8004bf4:	bf04      	itt	eq
 8004bf6:	2301      	moveq	r3, #1
 8004bf8:	61a3      	streq	r3, [r4, #24]
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	f000 f820 	bl	8004c40 <__sfp>
 8004c00:	6060      	str	r0, [r4, #4]
 8004c02:	4620      	mov	r0, r4
 8004c04:	f000 f81c 	bl	8004c40 <__sfp>
 8004c08:	60a0      	str	r0, [r4, #8]
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	f000 f818 	bl	8004c40 <__sfp>
 8004c10:	2200      	movs	r2, #0
 8004c12:	60e0      	str	r0, [r4, #12]
 8004c14:	2104      	movs	r1, #4
 8004c16:	6860      	ldr	r0, [r4, #4]
 8004c18:	f7ff ff82 	bl	8004b20 <std>
 8004c1c:	68a0      	ldr	r0, [r4, #8]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	2109      	movs	r1, #9
 8004c22:	f7ff ff7d 	bl	8004b20 <std>
 8004c26:	68e0      	ldr	r0, [r4, #12]
 8004c28:	2202      	movs	r2, #2
 8004c2a:	2112      	movs	r1, #18
 8004c2c:	f7ff ff78 	bl	8004b20 <std>
 8004c30:	2301      	movs	r3, #1
 8004c32:	61a3      	str	r3, [r4, #24]
 8004c34:	e7d2      	b.n	8004bdc <__sinit+0xc>
 8004c36:	bf00      	nop
 8004c38:	08005338 	.word	0x08005338
 8004c3c:	08004b69 	.word	0x08004b69

08004c40 <__sfp>:
 8004c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c42:	4607      	mov	r7, r0
 8004c44:	f7ff ffac 	bl	8004ba0 <__sfp_lock_acquire>
 8004c48:	4b1e      	ldr	r3, [pc, #120]	; (8004cc4 <__sfp+0x84>)
 8004c4a:	681e      	ldr	r6, [r3, #0]
 8004c4c:	69b3      	ldr	r3, [r6, #24]
 8004c4e:	b913      	cbnz	r3, 8004c56 <__sfp+0x16>
 8004c50:	4630      	mov	r0, r6
 8004c52:	f7ff ffbd 	bl	8004bd0 <__sinit>
 8004c56:	3648      	adds	r6, #72	; 0x48
 8004c58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	d503      	bpl.n	8004c68 <__sfp+0x28>
 8004c60:	6833      	ldr	r3, [r6, #0]
 8004c62:	b30b      	cbz	r3, 8004ca8 <__sfp+0x68>
 8004c64:	6836      	ldr	r6, [r6, #0]
 8004c66:	e7f7      	b.n	8004c58 <__sfp+0x18>
 8004c68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004c6c:	b9d5      	cbnz	r5, 8004ca4 <__sfp+0x64>
 8004c6e:	4b16      	ldr	r3, [pc, #88]	; (8004cc8 <__sfp+0x88>)
 8004c70:	60e3      	str	r3, [r4, #12]
 8004c72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c76:	6665      	str	r5, [r4, #100]	; 0x64
 8004c78:	f000 f847 	bl	8004d0a <__retarget_lock_init_recursive>
 8004c7c:	f7ff ff96 	bl	8004bac <__sfp_lock_release>
 8004c80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004c84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004c88:	6025      	str	r5, [r4, #0]
 8004c8a:	61a5      	str	r5, [r4, #24]
 8004c8c:	2208      	movs	r2, #8
 8004c8e:	4629      	mov	r1, r5
 8004c90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c94:	f7ff fd44 	bl	8004720 <memset>
 8004c98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ca4:	3468      	adds	r4, #104	; 0x68
 8004ca6:	e7d9      	b.n	8004c5c <__sfp+0x1c>
 8004ca8:	2104      	movs	r1, #4
 8004caa:	4638      	mov	r0, r7
 8004cac:	f7ff ff62 	bl	8004b74 <__sfmoreglue>
 8004cb0:	4604      	mov	r4, r0
 8004cb2:	6030      	str	r0, [r6, #0]
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	d1d5      	bne.n	8004c64 <__sfp+0x24>
 8004cb8:	f7ff ff78 	bl	8004bac <__sfp_lock_release>
 8004cbc:	230c      	movs	r3, #12
 8004cbe:	603b      	str	r3, [r7, #0]
 8004cc0:	e7ee      	b.n	8004ca0 <__sfp+0x60>
 8004cc2:	bf00      	nop
 8004cc4:	08005338 	.word	0x08005338
 8004cc8:	ffff0001 	.word	0xffff0001

08004ccc <_fwalk_reent>:
 8004ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cd0:	4606      	mov	r6, r0
 8004cd2:	4688      	mov	r8, r1
 8004cd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004cd8:	2700      	movs	r7, #0
 8004cda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004cde:	f1b9 0901 	subs.w	r9, r9, #1
 8004ce2:	d505      	bpl.n	8004cf0 <_fwalk_reent+0x24>
 8004ce4:	6824      	ldr	r4, [r4, #0]
 8004ce6:	2c00      	cmp	r4, #0
 8004ce8:	d1f7      	bne.n	8004cda <_fwalk_reent+0xe>
 8004cea:	4638      	mov	r0, r7
 8004cec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cf0:	89ab      	ldrh	r3, [r5, #12]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d907      	bls.n	8004d06 <_fwalk_reent+0x3a>
 8004cf6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	d003      	beq.n	8004d06 <_fwalk_reent+0x3a>
 8004cfe:	4629      	mov	r1, r5
 8004d00:	4630      	mov	r0, r6
 8004d02:	47c0      	blx	r8
 8004d04:	4307      	orrs	r7, r0
 8004d06:	3568      	adds	r5, #104	; 0x68
 8004d08:	e7e9      	b.n	8004cde <_fwalk_reent+0x12>

08004d0a <__retarget_lock_init_recursive>:
 8004d0a:	4770      	bx	lr

08004d0c <__retarget_lock_acquire_recursive>:
 8004d0c:	4770      	bx	lr

08004d0e <__retarget_lock_release_recursive>:
 8004d0e:	4770      	bx	lr

08004d10 <__swhatbuf_r>:
 8004d10:	b570      	push	{r4, r5, r6, lr}
 8004d12:	460e      	mov	r6, r1
 8004d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d18:	2900      	cmp	r1, #0
 8004d1a:	b096      	sub	sp, #88	; 0x58
 8004d1c:	4614      	mov	r4, r2
 8004d1e:	461d      	mov	r5, r3
 8004d20:	da08      	bge.n	8004d34 <__swhatbuf_r+0x24>
 8004d22:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	602a      	str	r2, [r5, #0]
 8004d2a:	061a      	lsls	r2, r3, #24
 8004d2c:	d410      	bmi.n	8004d50 <__swhatbuf_r+0x40>
 8004d2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d32:	e00e      	b.n	8004d52 <__swhatbuf_r+0x42>
 8004d34:	466a      	mov	r2, sp
 8004d36:	f000 f9a7 	bl	8005088 <_fstat_r>
 8004d3a:	2800      	cmp	r0, #0
 8004d3c:	dbf1      	blt.n	8004d22 <__swhatbuf_r+0x12>
 8004d3e:	9a01      	ldr	r2, [sp, #4]
 8004d40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004d44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004d48:	425a      	negs	r2, r3
 8004d4a:	415a      	adcs	r2, r3
 8004d4c:	602a      	str	r2, [r5, #0]
 8004d4e:	e7ee      	b.n	8004d2e <__swhatbuf_r+0x1e>
 8004d50:	2340      	movs	r3, #64	; 0x40
 8004d52:	2000      	movs	r0, #0
 8004d54:	6023      	str	r3, [r4, #0]
 8004d56:	b016      	add	sp, #88	; 0x58
 8004d58:	bd70      	pop	{r4, r5, r6, pc}
	...

08004d5c <__smakebuf_r>:
 8004d5c:	898b      	ldrh	r3, [r1, #12]
 8004d5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d60:	079d      	lsls	r5, r3, #30
 8004d62:	4606      	mov	r6, r0
 8004d64:	460c      	mov	r4, r1
 8004d66:	d507      	bpl.n	8004d78 <__smakebuf_r+0x1c>
 8004d68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d6c:	6023      	str	r3, [r4, #0]
 8004d6e:	6123      	str	r3, [r4, #16]
 8004d70:	2301      	movs	r3, #1
 8004d72:	6163      	str	r3, [r4, #20]
 8004d74:	b002      	add	sp, #8
 8004d76:	bd70      	pop	{r4, r5, r6, pc}
 8004d78:	ab01      	add	r3, sp, #4
 8004d7a:	466a      	mov	r2, sp
 8004d7c:	f7ff ffc8 	bl	8004d10 <__swhatbuf_r>
 8004d80:	9900      	ldr	r1, [sp, #0]
 8004d82:	4605      	mov	r5, r0
 8004d84:	4630      	mov	r0, r6
 8004d86:	f000 f895 	bl	8004eb4 <_malloc_r>
 8004d8a:	b948      	cbnz	r0, 8004da0 <__smakebuf_r+0x44>
 8004d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d90:	059a      	lsls	r2, r3, #22
 8004d92:	d4ef      	bmi.n	8004d74 <__smakebuf_r+0x18>
 8004d94:	f023 0303 	bic.w	r3, r3, #3
 8004d98:	f043 0302 	orr.w	r3, r3, #2
 8004d9c:	81a3      	strh	r3, [r4, #12]
 8004d9e:	e7e3      	b.n	8004d68 <__smakebuf_r+0xc>
 8004da0:	4b0d      	ldr	r3, [pc, #52]	; (8004dd8 <__smakebuf_r+0x7c>)
 8004da2:	62b3      	str	r3, [r6, #40]	; 0x28
 8004da4:	89a3      	ldrh	r3, [r4, #12]
 8004da6:	6020      	str	r0, [r4, #0]
 8004da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dac:	81a3      	strh	r3, [r4, #12]
 8004dae:	9b00      	ldr	r3, [sp, #0]
 8004db0:	6163      	str	r3, [r4, #20]
 8004db2:	9b01      	ldr	r3, [sp, #4]
 8004db4:	6120      	str	r0, [r4, #16]
 8004db6:	b15b      	cbz	r3, 8004dd0 <__smakebuf_r+0x74>
 8004db8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dbc:	4630      	mov	r0, r6
 8004dbe:	f000 f975 	bl	80050ac <_isatty_r>
 8004dc2:	b128      	cbz	r0, 8004dd0 <__smakebuf_r+0x74>
 8004dc4:	89a3      	ldrh	r3, [r4, #12]
 8004dc6:	f023 0303 	bic.w	r3, r3, #3
 8004dca:	f043 0301 	orr.w	r3, r3, #1
 8004dce:	81a3      	strh	r3, [r4, #12]
 8004dd0:	89a0      	ldrh	r0, [r4, #12]
 8004dd2:	4305      	orrs	r5, r0
 8004dd4:	81a5      	strh	r5, [r4, #12]
 8004dd6:	e7cd      	b.n	8004d74 <__smakebuf_r+0x18>
 8004dd8:	08004b69 	.word	0x08004b69

08004ddc <_free_r>:
 8004ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004dde:	2900      	cmp	r1, #0
 8004de0:	d044      	beq.n	8004e6c <_free_r+0x90>
 8004de2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004de6:	9001      	str	r0, [sp, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f1a1 0404 	sub.w	r4, r1, #4
 8004dee:	bfb8      	it	lt
 8004df0:	18e4      	addlt	r4, r4, r3
 8004df2:	f000 f97d 	bl	80050f0 <__malloc_lock>
 8004df6:	4a1e      	ldr	r2, [pc, #120]	; (8004e70 <_free_r+0x94>)
 8004df8:	9801      	ldr	r0, [sp, #4]
 8004dfa:	6813      	ldr	r3, [r2, #0]
 8004dfc:	b933      	cbnz	r3, 8004e0c <_free_r+0x30>
 8004dfe:	6063      	str	r3, [r4, #4]
 8004e00:	6014      	str	r4, [r2, #0]
 8004e02:	b003      	add	sp, #12
 8004e04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e08:	f000 b978 	b.w	80050fc <__malloc_unlock>
 8004e0c:	42a3      	cmp	r3, r4
 8004e0e:	d908      	bls.n	8004e22 <_free_r+0x46>
 8004e10:	6825      	ldr	r5, [r4, #0]
 8004e12:	1961      	adds	r1, r4, r5
 8004e14:	428b      	cmp	r3, r1
 8004e16:	bf01      	itttt	eq
 8004e18:	6819      	ldreq	r1, [r3, #0]
 8004e1a:	685b      	ldreq	r3, [r3, #4]
 8004e1c:	1949      	addeq	r1, r1, r5
 8004e1e:	6021      	streq	r1, [r4, #0]
 8004e20:	e7ed      	b.n	8004dfe <_free_r+0x22>
 8004e22:	461a      	mov	r2, r3
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	b10b      	cbz	r3, 8004e2c <_free_r+0x50>
 8004e28:	42a3      	cmp	r3, r4
 8004e2a:	d9fa      	bls.n	8004e22 <_free_r+0x46>
 8004e2c:	6811      	ldr	r1, [r2, #0]
 8004e2e:	1855      	adds	r5, r2, r1
 8004e30:	42a5      	cmp	r5, r4
 8004e32:	d10b      	bne.n	8004e4c <_free_r+0x70>
 8004e34:	6824      	ldr	r4, [r4, #0]
 8004e36:	4421      	add	r1, r4
 8004e38:	1854      	adds	r4, r2, r1
 8004e3a:	42a3      	cmp	r3, r4
 8004e3c:	6011      	str	r1, [r2, #0]
 8004e3e:	d1e0      	bne.n	8004e02 <_free_r+0x26>
 8004e40:	681c      	ldr	r4, [r3, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	6053      	str	r3, [r2, #4]
 8004e46:	4421      	add	r1, r4
 8004e48:	6011      	str	r1, [r2, #0]
 8004e4a:	e7da      	b.n	8004e02 <_free_r+0x26>
 8004e4c:	d902      	bls.n	8004e54 <_free_r+0x78>
 8004e4e:	230c      	movs	r3, #12
 8004e50:	6003      	str	r3, [r0, #0]
 8004e52:	e7d6      	b.n	8004e02 <_free_r+0x26>
 8004e54:	6825      	ldr	r5, [r4, #0]
 8004e56:	1961      	adds	r1, r4, r5
 8004e58:	428b      	cmp	r3, r1
 8004e5a:	bf04      	itt	eq
 8004e5c:	6819      	ldreq	r1, [r3, #0]
 8004e5e:	685b      	ldreq	r3, [r3, #4]
 8004e60:	6063      	str	r3, [r4, #4]
 8004e62:	bf04      	itt	eq
 8004e64:	1949      	addeq	r1, r1, r5
 8004e66:	6021      	streq	r1, [r4, #0]
 8004e68:	6054      	str	r4, [r2, #4]
 8004e6a:	e7ca      	b.n	8004e02 <_free_r+0x26>
 8004e6c:	b003      	add	sp, #12
 8004e6e:	bd30      	pop	{r4, r5, pc}
 8004e70:	20000190 	.word	0x20000190

08004e74 <sbrk_aligned>:
 8004e74:	b570      	push	{r4, r5, r6, lr}
 8004e76:	4e0e      	ldr	r6, [pc, #56]	; (8004eb0 <sbrk_aligned+0x3c>)
 8004e78:	460c      	mov	r4, r1
 8004e7a:	6831      	ldr	r1, [r6, #0]
 8004e7c:	4605      	mov	r5, r0
 8004e7e:	b911      	cbnz	r1, 8004e86 <sbrk_aligned+0x12>
 8004e80:	f000 f88c 	bl	8004f9c <_sbrk_r>
 8004e84:	6030      	str	r0, [r6, #0]
 8004e86:	4621      	mov	r1, r4
 8004e88:	4628      	mov	r0, r5
 8004e8a:	f000 f887 	bl	8004f9c <_sbrk_r>
 8004e8e:	1c43      	adds	r3, r0, #1
 8004e90:	d00a      	beq.n	8004ea8 <sbrk_aligned+0x34>
 8004e92:	1cc4      	adds	r4, r0, #3
 8004e94:	f024 0403 	bic.w	r4, r4, #3
 8004e98:	42a0      	cmp	r0, r4
 8004e9a:	d007      	beq.n	8004eac <sbrk_aligned+0x38>
 8004e9c:	1a21      	subs	r1, r4, r0
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	f000 f87c 	bl	8004f9c <_sbrk_r>
 8004ea4:	3001      	adds	r0, #1
 8004ea6:	d101      	bne.n	8004eac <sbrk_aligned+0x38>
 8004ea8:	f04f 34ff 	mov.w	r4, #4294967295
 8004eac:	4620      	mov	r0, r4
 8004eae:	bd70      	pop	{r4, r5, r6, pc}
 8004eb0:	20000194 	.word	0x20000194

08004eb4 <_malloc_r>:
 8004eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb8:	1ccd      	adds	r5, r1, #3
 8004eba:	f025 0503 	bic.w	r5, r5, #3
 8004ebe:	3508      	adds	r5, #8
 8004ec0:	2d0c      	cmp	r5, #12
 8004ec2:	bf38      	it	cc
 8004ec4:	250c      	movcc	r5, #12
 8004ec6:	2d00      	cmp	r5, #0
 8004ec8:	4607      	mov	r7, r0
 8004eca:	db01      	blt.n	8004ed0 <_malloc_r+0x1c>
 8004ecc:	42a9      	cmp	r1, r5
 8004ece:	d905      	bls.n	8004edc <_malloc_r+0x28>
 8004ed0:	230c      	movs	r3, #12
 8004ed2:	603b      	str	r3, [r7, #0]
 8004ed4:	2600      	movs	r6, #0
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004edc:	4e2e      	ldr	r6, [pc, #184]	; (8004f98 <_malloc_r+0xe4>)
 8004ede:	f000 f907 	bl	80050f0 <__malloc_lock>
 8004ee2:	6833      	ldr	r3, [r6, #0]
 8004ee4:	461c      	mov	r4, r3
 8004ee6:	bb34      	cbnz	r4, 8004f36 <_malloc_r+0x82>
 8004ee8:	4629      	mov	r1, r5
 8004eea:	4638      	mov	r0, r7
 8004eec:	f7ff ffc2 	bl	8004e74 <sbrk_aligned>
 8004ef0:	1c43      	adds	r3, r0, #1
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	d14d      	bne.n	8004f92 <_malloc_r+0xde>
 8004ef6:	6834      	ldr	r4, [r6, #0]
 8004ef8:	4626      	mov	r6, r4
 8004efa:	2e00      	cmp	r6, #0
 8004efc:	d140      	bne.n	8004f80 <_malloc_r+0xcc>
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	4631      	mov	r1, r6
 8004f02:	4638      	mov	r0, r7
 8004f04:	eb04 0803 	add.w	r8, r4, r3
 8004f08:	f000 f848 	bl	8004f9c <_sbrk_r>
 8004f0c:	4580      	cmp	r8, r0
 8004f0e:	d13a      	bne.n	8004f86 <_malloc_r+0xd2>
 8004f10:	6821      	ldr	r1, [r4, #0]
 8004f12:	3503      	adds	r5, #3
 8004f14:	1a6d      	subs	r5, r5, r1
 8004f16:	f025 0503 	bic.w	r5, r5, #3
 8004f1a:	3508      	adds	r5, #8
 8004f1c:	2d0c      	cmp	r5, #12
 8004f1e:	bf38      	it	cc
 8004f20:	250c      	movcc	r5, #12
 8004f22:	4629      	mov	r1, r5
 8004f24:	4638      	mov	r0, r7
 8004f26:	f7ff ffa5 	bl	8004e74 <sbrk_aligned>
 8004f2a:	3001      	adds	r0, #1
 8004f2c:	d02b      	beq.n	8004f86 <_malloc_r+0xd2>
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	442b      	add	r3, r5
 8004f32:	6023      	str	r3, [r4, #0]
 8004f34:	e00e      	b.n	8004f54 <_malloc_r+0xa0>
 8004f36:	6822      	ldr	r2, [r4, #0]
 8004f38:	1b52      	subs	r2, r2, r5
 8004f3a:	d41e      	bmi.n	8004f7a <_malloc_r+0xc6>
 8004f3c:	2a0b      	cmp	r2, #11
 8004f3e:	d916      	bls.n	8004f6e <_malloc_r+0xba>
 8004f40:	1961      	adds	r1, r4, r5
 8004f42:	42a3      	cmp	r3, r4
 8004f44:	6025      	str	r5, [r4, #0]
 8004f46:	bf18      	it	ne
 8004f48:	6059      	strne	r1, [r3, #4]
 8004f4a:	6863      	ldr	r3, [r4, #4]
 8004f4c:	bf08      	it	eq
 8004f4e:	6031      	streq	r1, [r6, #0]
 8004f50:	5162      	str	r2, [r4, r5]
 8004f52:	604b      	str	r3, [r1, #4]
 8004f54:	4638      	mov	r0, r7
 8004f56:	f104 060b 	add.w	r6, r4, #11
 8004f5a:	f000 f8cf 	bl	80050fc <__malloc_unlock>
 8004f5e:	f026 0607 	bic.w	r6, r6, #7
 8004f62:	1d23      	adds	r3, r4, #4
 8004f64:	1af2      	subs	r2, r6, r3
 8004f66:	d0b6      	beq.n	8004ed6 <_malloc_r+0x22>
 8004f68:	1b9b      	subs	r3, r3, r6
 8004f6a:	50a3      	str	r3, [r4, r2]
 8004f6c:	e7b3      	b.n	8004ed6 <_malloc_r+0x22>
 8004f6e:	6862      	ldr	r2, [r4, #4]
 8004f70:	42a3      	cmp	r3, r4
 8004f72:	bf0c      	ite	eq
 8004f74:	6032      	streq	r2, [r6, #0]
 8004f76:	605a      	strne	r2, [r3, #4]
 8004f78:	e7ec      	b.n	8004f54 <_malloc_r+0xa0>
 8004f7a:	4623      	mov	r3, r4
 8004f7c:	6864      	ldr	r4, [r4, #4]
 8004f7e:	e7b2      	b.n	8004ee6 <_malloc_r+0x32>
 8004f80:	4634      	mov	r4, r6
 8004f82:	6876      	ldr	r6, [r6, #4]
 8004f84:	e7b9      	b.n	8004efa <_malloc_r+0x46>
 8004f86:	230c      	movs	r3, #12
 8004f88:	603b      	str	r3, [r7, #0]
 8004f8a:	4638      	mov	r0, r7
 8004f8c:	f000 f8b6 	bl	80050fc <__malloc_unlock>
 8004f90:	e7a1      	b.n	8004ed6 <_malloc_r+0x22>
 8004f92:	6025      	str	r5, [r4, #0]
 8004f94:	e7de      	b.n	8004f54 <_malloc_r+0xa0>
 8004f96:	bf00      	nop
 8004f98:	20000190 	.word	0x20000190

08004f9c <_sbrk_r>:
 8004f9c:	b538      	push	{r3, r4, r5, lr}
 8004f9e:	4d06      	ldr	r5, [pc, #24]	; (8004fb8 <_sbrk_r+0x1c>)
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	4604      	mov	r4, r0
 8004fa4:	4608      	mov	r0, r1
 8004fa6:	602b      	str	r3, [r5, #0]
 8004fa8:	f7fc fb5e 	bl	8001668 <_sbrk>
 8004fac:	1c43      	adds	r3, r0, #1
 8004fae:	d102      	bne.n	8004fb6 <_sbrk_r+0x1a>
 8004fb0:	682b      	ldr	r3, [r5, #0]
 8004fb2:	b103      	cbz	r3, 8004fb6 <_sbrk_r+0x1a>
 8004fb4:	6023      	str	r3, [r4, #0]
 8004fb6:	bd38      	pop	{r3, r4, r5, pc}
 8004fb8:	20000198 	.word	0x20000198

08004fbc <__sread>:
 8004fbc:	b510      	push	{r4, lr}
 8004fbe:	460c      	mov	r4, r1
 8004fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fc4:	f000 f8a0 	bl	8005108 <_read_r>
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	bfab      	itete	ge
 8004fcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004fce:	89a3      	ldrhlt	r3, [r4, #12]
 8004fd0:	181b      	addge	r3, r3, r0
 8004fd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004fd6:	bfac      	ite	ge
 8004fd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004fda:	81a3      	strhlt	r3, [r4, #12]
 8004fdc:	bd10      	pop	{r4, pc}

08004fde <__swrite>:
 8004fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fe2:	461f      	mov	r7, r3
 8004fe4:	898b      	ldrh	r3, [r1, #12]
 8004fe6:	05db      	lsls	r3, r3, #23
 8004fe8:	4605      	mov	r5, r0
 8004fea:	460c      	mov	r4, r1
 8004fec:	4616      	mov	r6, r2
 8004fee:	d505      	bpl.n	8004ffc <__swrite+0x1e>
 8004ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f000 f868 	bl	80050cc <_lseek_r>
 8004ffc:	89a3      	ldrh	r3, [r4, #12]
 8004ffe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005002:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005006:	81a3      	strh	r3, [r4, #12]
 8005008:	4632      	mov	r2, r6
 800500a:	463b      	mov	r3, r7
 800500c:	4628      	mov	r0, r5
 800500e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005012:	f000 b817 	b.w	8005044 <_write_r>

08005016 <__sseek>:
 8005016:	b510      	push	{r4, lr}
 8005018:	460c      	mov	r4, r1
 800501a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800501e:	f000 f855 	bl	80050cc <_lseek_r>
 8005022:	1c43      	adds	r3, r0, #1
 8005024:	89a3      	ldrh	r3, [r4, #12]
 8005026:	bf15      	itete	ne
 8005028:	6560      	strne	r0, [r4, #84]	; 0x54
 800502a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800502e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005032:	81a3      	strheq	r3, [r4, #12]
 8005034:	bf18      	it	ne
 8005036:	81a3      	strhne	r3, [r4, #12]
 8005038:	bd10      	pop	{r4, pc}

0800503a <__sclose>:
 800503a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800503e:	f000 b813 	b.w	8005068 <_close_r>
	...

08005044 <_write_r>:
 8005044:	b538      	push	{r3, r4, r5, lr}
 8005046:	4d07      	ldr	r5, [pc, #28]	; (8005064 <_write_r+0x20>)
 8005048:	4604      	mov	r4, r0
 800504a:	4608      	mov	r0, r1
 800504c:	4611      	mov	r1, r2
 800504e:	2200      	movs	r2, #0
 8005050:	602a      	str	r2, [r5, #0]
 8005052:	461a      	mov	r2, r3
 8005054:	f7fb fff8 	bl	8001048 <_write>
 8005058:	1c43      	adds	r3, r0, #1
 800505a:	d102      	bne.n	8005062 <_write_r+0x1e>
 800505c:	682b      	ldr	r3, [r5, #0]
 800505e:	b103      	cbz	r3, 8005062 <_write_r+0x1e>
 8005060:	6023      	str	r3, [r4, #0]
 8005062:	bd38      	pop	{r3, r4, r5, pc}
 8005064:	20000198 	.word	0x20000198

08005068 <_close_r>:
 8005068:	b538      	push	{r3, r4, r5, lr}
 800506a:	4d06      	ldr	r5, [pc, #24]	; (8005084 <_close_r+0x1c>)
 800506c:	2300      	movs	r3, #0
 800506e:	4604      	mov	r4, r0
 8005070:	4608      	mov	r0, r1
 8005072:	602b      	str	r3, [r5, #0]
 8005074:	f7fc fac3 	bl	80015fe <_close>
 8005078:	1c43      	adds	r3, r0, #1
 800507a:	d102      	bne.n	8005082 <_close_r+0x1a>
 800507c:	682b      	ldr	r3, [r5, #0]
 800507e:	b103      	cbz	r3, 8005082 <_close_r+0x1a>
 8005080:	6023      	str	r3, [r4, #0]
 8005082:	bd38      	pop	{r3, r4, r5, pc}
 8005084:	20000198 	.word	0x20000198

08005088 <_fstat_r>:
 8005088:	b538      	push	{r3, r4, r5, lr}
 800508a:	4d07      	ldr	r5, [pc, #28]	; (80050a8 <_fstat_r+0x20>)
 800508c:	2300      	movs	r3, #0
 800508e:	4604      	mov	r4, r0
 8005090:	4608      	mov	r0, r1
 8005092:	4611      	mov	r1, r2
 8005094:	602b      	str	r3, [r5, #0]
 8005096:	f7fc fabe 	bl	8001616 <_fstat>
 800509a:	1c43      	adds	r3, r0, #1
 800509c:	d102      	bne.n	80050a4 <_fstat_r+0x1c>
 800509e:	682b      	ldr	r3, [r5, #0]
 80050a0:	b103      	cbz	r3, 80050a4 <_fstat_r+0x1c>
 80050a2:	6023      	str	r3, [r4, #0]
 80050a4:	bd38      	pop	{r3, r4, r5, pc}
 80050a6:	bf00      	nop
 80050a8:	20000198 	.word	0x20000198

080050ac <_isatty_r>:
 80050ac:	b538      	push	{r3, r4, r5, lr}
 80050ae:	4d06      	ldr	r5, [pc, #24]	; (80050c8 <_isatty_r+0x1c>)
 80050b0:	2300      	movs	r3, #0
 80050b2:	4604      	mov	r4, r0
 80050b4:	4608      	mov	r0, r1
 80050b6:	602b      	str	r3, [r5, #0]
 80050b8:	f7fc fabd 	bl	8001636 <_isatty>
 80050bc:	1c43      	adds	r3, r0, #1
 80050be:	d102      	bne.n	80050c6 <_isatty_r+0x1a>
 80050c0:	682b      	ldr	r3, [r5, #0]
 80050c2:	b103      	cbz	r3, 80050c6 <_isatty_r+0x1a>
 80050c4:	6023      	str	r3, [r4, #0]
 80050c6:	bd38      	pop	{r3, r4, r5, pc}
 80050c8:	20000198 	.word	0x20000198

080050cc <_lseek_r>:
 80050cc:	b538      	push	{r3, r4, r5, lr}
 80050ce:	4d07      	ldr	r5, [pc, #28]	; (80050ec <_lseek_r+0x20>)
 80050d0:	4604      	mov	r4, r0
 80050d2:	4608      	mov	r0, r1
 80050d4:	4611      	mov	r1, r2
 80050d6:	2200      	movs	r2, #0
 80050d8:	602a      	str	r2, [r5, #0]
 80050da:	461a      	mov	r2, r3
 80050dc:	f7fc fab6 	bl	800164c <_lseek>
 80050e0:	1c43      	adds	r3, r0, #1
 80050e2:	d102      	bne.n	80050ea <_lseek_r+0x1e>
 80050e4:	682b      	ldr	r3, [r5, #0]
 80050e6:	b103      	cbz	r3, 80050ea <_lseek_r+0x1e>
 80050e8:	6023      	str	r3, [r4, #0]
 80050ea:	bd38      	pop	{r3, r4, r5, pc}
 80050ec:	20000198 	.word	0x20000198

080050f0 <__malloc_lock>:
 80050f0:	4801      	ldr	r0, [pc, #4]	; (80050f8 <__malloc_lock+0x8>)
 80050f2:	f7ff be0b 	b.w	8004d0c <__retarget_lock_acquire_recursive>
 80050f6:	bf00      	nop
 80050f8:	2000018c 	.word	0x2000018c

080050fc <__malloc_unlock>:
 80050fc:	4801      	ldr	r0, [pc, #4]	; (8005104 <__malloc_unlock+0x8>)
 80050fe:	f7ff be06 	b.w	8004d0e <__retarget_lock_release_recursive>
 8005102:	bf00      	nop
 8005104:	2000018c 	.word	0x2000018c

08005108 <_read_r>:
 8005108:	b538      	push	{r3, r4, r5, lr}
 800510a:	4d07      	ldr	r5, [pc, #28]	; (8005128 <_read_r+0x20>)
 800510c:	4604      	mov	r4, r0
 800510e:	4608      	mov	r0, r1
 8005110:	4611      	mov	r1, r2
 8005112:	2200      	movs	r2, #0
 8005114:	602a      	str	r2, [r5, #0]
 8005116:	461a      	mov	r2, r3
 8005118:	f7fc fa54 	bl	80015c4 <_read>
 800511c:	1c43      	adds	r3, r0, #1
 800511e:	d102      	bne.n	8005126 <_read_r+0x1e>
 8005120:	682b      	ldr	r3, [r5, #0]
 8005122:	b103      	cbz	r3, 8005126 <_read_r+0x1e>
 8005124:	6023      	str	r3, [r4, #0]
 8005126:	bd38      	pop	{r3, r4, r5, pc}
 8005128:	20000198 	.word	0x20000198

0800512c <_init>:
 800512c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512e:	bf00      	nop
 8005130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005132:	bc08      	pop	{r3}
 8005134:	469e      	mov	lr, r3
 8005136:	4770      	bx	lr

08005138 <_fini>:
 8005138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513a:	bf00      	nop
 800513c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800513e:	bc08      	pop	{r3}
 8005140:	469e      	mov	lr, r3
 8005142:	4770      	bx	lr
